// Generic "hold-to-activate" script
Script "Activate" (int lineid, int repairtime)
{
	if (!repairtime) { repairtime = 1; }

	int increment = 1;

	if (repairtime < 0) // Using a negative repairtime will set the script to require a certain number of activations instead of a time duration
	{
		repairtime *= -1;
		increment = 35;
	}

	if (repairstate[lineid] < repairtime * 35) // Standard 35 use/script cycles per second
	{
		if (repairstate[lineid] == 0) // Show hint message on first use
		{
			if (increment == 35) { ACS_NamedExecute("HintMessage", 0, "HINTTEXTFIRE"); }
			else { ACS_NamedExecute("HintMessage", 0, "HINTTEXTHOLD"); } 
		}

		int step = 80 + 10 * repairstate[lineid] / (repairtime * 35);

		if (step < 80) { step = 80; } // Clamp between 80 and 90
		else if (step > 90) { step = 90; } 

		SetUserVariable(0, "crosshair", step);  // Show progress by changing the crosshair based on hold time
		repairstate[lineid] += increment; // Increment the repair amount
	}

	if (repairstate[lineid] >= repairtime * 35) // If it's fully repaired...
	{
		ClearLineSpecial(); // Clear the line special to prevent further activation

		SetUserVariable(0, "crosshair", 90); // Show progress complete

		Delay(35); // Wait a second before clearing the crosshair (so you have a chance to see the full meter)

		SetUserVariable(0, "crosshair", 0); // Clear the crosshair
		SetUserVariable(0, "crosshairstring", "");

		SetResultValue(1);
	}

	SetResultValue(0);
}

// Generic interactive paper display script.  
// Takes a message number as an argument, then looks up PAPERTEXT__ in LANGUAGE and displays that message
// Paper style can be customized via the seond argument, and font style by the third argument
script "Textpaper" (int text_number, int paperstyle, int fontstyle)
{
	str message = "";

	// If a message number (0 or higher) was passed, the lookup name will be formatted as PAPERTEXTxx - PAPERTEXT00, PAPERTEXT01, etc.)
	if (text_number > 0) { message = StrParam(s:"PAPERTEXT", s:Pad(text_number, 2)); }

	str paper = "PAPER1"; // Default background
	int pageoffset = 0; // Start text at the top of the page

	// Set the background image if one was specified; if the image has a letterhead, offset the text y offset
	if (paperstyle > 0)
	{
		paper = StrParam(s:"PAPER", d:paperstyle);

		switch (paperstyle) // Offset the starting y value of the text to account for the letterhead
		{
			case 3:
				pageoffset = 25;
				break;
			case 4:
				pageoffset = 45;
				break;
			default:
				break;
		}
	}

	int fontsize = 30; // Not truly font size - sets the overall scale of the font positioning and wrapping

	// Set the actual font, based on the int that was passed, and do any other necessary adjustments
	str font;
	switch (fontstyle)
	{
		case 1: // Set Type (not fixed width) - Like in a commercially printed book
			font = "AMH18"; // http://bmf.php5.cz/?font=amh18
			fontsize = fontsize * 7 / 8; // Make this one slightly smaller
			break;
		default:
		case 2: // Typewriter Font
			font = "typewriter"; // Ripped from Fallout 76
			break;
		case 3: // Runic Font
			font = "RUN14"; // http://bmf.php5.cz/?font=run14
			break;
		case 4: // Print handwriting
			font = "CHICKN24"; // http://bmf.php5.cz/?font=chickn24
			fontsize = fontsize * 7 / 8;
			break;
		case 5: // Print handwriting 2
			font = "handwriting_neat"; // Ripped from Fallout 76
			break;
		case 6: // Print handwriting 3
			font = "handwriting_institute"; // Ripped from Fallout 76
			break;
	}

	// These won't change, so calculate them once here instead of during each loop
	// This adjusts the coordinates for whatever "font size" we've set above.
	int scale = 128.0 / fontsize;
	int textwidth = 320 * scale / 1.0;
	int textheight = 200 * scale / 1.0;
	int textx = FixedMul(95.0, scale) / 1.0 * 1.0; // Get rid of trailing decimals
	int texty = FixedMul(pageoffset * 1.0 + 20.0, scale) / 1.0 * 1.0;
	int wrapwidth = 132 * scale / 1.0;

	int flags = HUDMSG_FADEINOUT | HUDMSG_NOTWITHFULLMAP | HUDMSG_COLORSTRING | HUDMSG_ALPHA;

	int fadein = 0.25;

	SetPlayerProperty(0, 1, PROP_TOTALLYFROZEN); // Freeze the player while they're reading

	// Paper stays on screen until you press the 'use' button
	while (fadein > 0 || !(GetPlayerInput(-1, INPUT_BUTTONS) & BT_USE && !(GetPlayerInput(-1, INPUT_OLDBUTTONS) & BT_USE)))
	{
		SetHudSize(640, 490, false);
		SetFont(paper);
		HudMessage(s:"A"; flags, 4, 0, 320.0, 240.0, 0.15, fadein, 1.0);

		SetHudSize(textwidth, textheight, false);
		SetHudWrapWidth(wrapwidth);
		SetFont(font);

		if (fadein > 0) // Only the initial display does a fade in
		{
			HudMessage(l:message; flags | HUDMSG_LOG, 3, CR_UNTRANSLATED, textx + 0.1, texty + 0.1, 0.15, fadein, 1.0, 0.9); 
			ACS_NamedExecute("HintMessage", 0, "PAPERTEXTHOLD"); 
			Delay(35 * fadein / 1.0);
			fadein = 0;
		}
		else
		{
			// Must use CR_UNTRANSLATED as color here here to preserve soft edges on fonts!
			HudMessage(l:message; flags, 3, CR_UNTRANSLATED, textx + 0.1, texty + 0.1, 0.15, fadein, 1.0, 0.9); 
		}

		Delay(1);
	}

	SetPlayerProperty(0, 0, PROP_TOTALLYFROZEN);

	SetResultValue(0);
}