#library "boalib"
#include "zcommon.acs"
#import "stealth.acs" //mxd

global int 1:disable_mutants; //mxd. When set to true, Mutant and MutantMelee will immediately despawn after spawning.
global int 2:disable_big_mutants; //mxd. When set to true, BigMutant1 and BigMutant2 will immediately despawn after spawning.
global int 3:disable_supermutants; //mxd. When set to true, UberMutant and SuperMutant will immediately despawn after spawning.
global int 4:astrostein; //[Ed} When set to true, grenades will change to the Astrostein variant

str darrenmessage[21]=
{
	"DARRENMESSAGE01","DARRENMESSAGE02","DARRENMESSAGE03","DARRENMESSAGE04","DARRENMESSAGE05",
	"DARRENMESSAGE06","DARRENMESSAGE07","DARRENMESSAGE08","DARRENMESSAGE09","DARRENMESSAGE10",
	"DARRENMESSAGE11","DARRENMESSAGE12","DARRENMESSAGE13","DARRENMESSAGE14","DARRENMESSAGE15",
	"DARRENMESSAGE16","DARRENMESSAGE17","DARRENMESSAGE18","DARRENMESSAGE19","DARRENMESSAGE20",
	"DARRENMESSAGE21"
};
str prisonermessage[3]=
{
	"PRISONERMESSAGE01","PRISONERMESSAGE02","PRISONERMESSAGE03"
};

script "BoADialogue"(int who, int which)
{
	str message;
	str headtalky;
	str headsilent;

	//mxd. Choose which graphics and text to display
	if(who == 1) // Darren
	{
		headtalky = "MS_DARR1";
		headsilent = "MS_DARR0";
		message = StrParam(s:"\cEDirty Darren\n\cC", l:darrenmessage[which]);
	}
	else if(who == 2) // Prisoner
	{
		headtalky = "MS_PRIB1";
		headsilent = "MS_PRIB0";
		message = StrParam(s:"\cEAgent Ryan\ncC", l:prisonermessage[which]);
	}

	// Fade in HUD BGs
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 4, CR_UNTRANSLATED, 160.0, 24.0, 9.0, 1.0, 1.0);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 1, CR_UNTRANSLATED, 160.0, 24.0, 9.0, 1.0, 1.0); //mxd

	// Fade in the portrait
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 3, CR_UNTRANSLATED, 21.0, 16.0, 999.0, 1.0, 999.0);

	// Start talk animation
	Delay(35);
	SetFont(headtalky);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, 3, CR_UNTRANSLATED, 21.0, 16.0, 6.0);

	// Show message
	AmbientSound("RADIONOS",127);
	SetHudSize(640, 400, false);
	SetFont("SMALLFONT");
	SetHudWrapWidth(540);
	hudmessagebold(s:message; HUDMSG_TYPEON, 2, CR_GRAY, 100.1, 13.1, 6.0, 0.03);

	// Stop talk animation
	delay(5*35);
	SetHudSize(320, 200, true);
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, 3, CR_UNTRANSLATED, 21.0, 16.0, 2.0);

	// Fade out the portrait
	delay(2*35);
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0, 0.0, 1.0);
}
//Controls
Script "AutoReload"(void)
{
	SetResultValue(GetCVar("autoreload"));
}
Script "ShellLifetime"(void)
{
	SetResultValue(GetCVar("casinglifetime"));
}
Script "RecoilAmount"(void)
{
	SetResultValue(GetCVar("recoilamount"));
}
Script "DebrisLifetime"(void)
{
	SetResultValue(GetCVar("debrislifetime"));
}
script "WWNaziSkillCheck" (void)
{
	SetResultValue(GameSkill());
}
//Weather
Script "RainSwitch"(void)
{
	SetResultValue(GetCVar("rainswitch"));
}
Script "SnowSwitch"(void)
{
	SetResultValue(GetCVar("snowswitch"));
}
Script "FogSwitch"(void)
{
	SetResultValue(GetCVar("fogswitch"));
}
//Special Effects
Script "CinderSwitch"(void)
{
	SetResultValue(GetCVar("cinderswitch"));
}
Script "DustSwitch"(void)
{
	SetResultValue(GetCVar("dustswitch"));
}
Script "SmokeSwitch"(void)
{
	SetResultValue(GetCVar("smokeswitch"));
}
Script "LitsSwitch"(void)
{
	SetResultValue(GetCVar("litsswitch"));
}

//sprinting stamina
int cooldown[8];

script "Dashing" ENTER
{
	if(!CheckActorClass(0,"BoAPlayer")) terminate;

	int buttons = GetPlayerInput(-1,INPUT_BUTTONS);
	if((buttons & BT_SPEED) && (buttons & BT_FORWARD) && !(buttons & BT_CROUCH) && CheckInventory("Stamina") && cooldown[PlayerNumber()] <= 0)
	{
		SetActorProperty(0,APROP_SPEED,2.0);
		TakeInventory("Stamina",random(1,3)); //more stamina to use
	}
	else
	{
		SetActorProperty(0,APROP_SPEED,1.0);
		cooldown[PlayerNumber()]--;
		delay(random(1,3)); //recovery is more fast
		GiveInventory("Stamina",1);
	}
	if(!CheckInventory("Stamina"))
		cooldown[PlayerNumber()]=100;
	delay(1);
	restart;
}

Script "Exhausted" ENTER
{
	if(!CheckActorClass(0,"BoAPlayer")||GameType()==GAME_TITLE_MAP)
		terminate;
	while(CheckInventory("Stamina")<25)
	{
		if(GetActorProperty(0,APROP_WATERLEVEL)<3)
			PlaySound(0,"player/breathing",CHAN_VOICE);
		Delay(50);
	}
	Delay(1);
	restart;
}

//mxd. Mutants despawn checks
script "DisableMutants" (void)
{
	if(disable_mutants) Thing_Remove(0);
}

script "DisableBigMutants" (void)
{
	if(disable_big_mutants) Thing_Remove(0);
}

script "DisableSuperMutants" (void)
{
	if(disable_supermutants) Thing_Remove(0);
}

//Astrostein check
script "AstrosteinCheck" (void)
{
	SetResultValue(astrostein);
}

//Compass
bool compassActive[8];

int dots;		//Items to appear on compass
int marks[50];	//Items with tids

//FUNCTIONS
function int _cos(int a)
{
	a%=1.0;
	if(a<0)
		a+=1.0;
	if(a>0.5)
		a=-a+1.0;
	return cos(a);
}

function int _sin(int a)
{
	return _cos(a+0.25);
}

script "BoA_Compass" ENTER
{
	if(compassActive[playerNumber()])
	{
		SetHUDSize(1024,768,1);
		int a=GetActorAngle(0);
		int x=-_cos(a)*34/1.0,y=_sin(a)*34/1.0;
		SetFont("COMPASS1");
		HUDMessage(s:"N"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,x * 1.0 + 85.0,y * 1.0 + 170.0,0.03);
		HUDMessage(s:"S"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,-x * 1.0 + 85.0,-y * 1.0 + 170.0,0.03);
		HUDMessage(s:"E"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,-y * 1.0 + 85.0,x * 1.0 + 170.0,0.03);
		HUDMessage(s:"W"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,y * 1.0 + 85.0,-x * 1.0 + 170.0,0.03);
		SetFont("COMPASS");
		HUDMessage(s:"A"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,85.0,162.0,0.03);
		for(int i=0;i<dots;i++)
			drawdot(4000+i);
		for(i=0;marks[i]!=0;i++)
			drawdot(marks[i]);
	}
	Delay(1);
	restart;
}

script "BoA_CompassQueue"(void)
{
	if(ActivatorTID())
	{
		int i;
		while(marks[i]!=0)
			i++;
		marks[i]=ActivatorTID();
	}
	else
		Thing_ChangeTID(0,4000+dots++);
}

function void drawdot(int tid)
{
	SetHUDSize(1024,768,1);
	if(GetActorProperty(tid,APROP_Health)>0)
	{
		int dx = GetActorX(0) - GetActorX(tid),dy = GetActorY(0) - GetActorY(tid);
		int a = GetActorAngle(0) - VectorAngle(dx, dy) - 0.25;
		dx /= 1.0;
		dy /= 1.0;
		int dist = sqrt(dx*dx + dy*dy),rdist = dist / 10;
		if(rdist > 33)
			rdist = 33;
		if(CheckActorClass(tid,"Akten")||CheckActorClass(tid,"AktenEisenmann")||CheckActorClass(tid,"SpearOfDestiny"))
		{
			SetFont("GOAL1");
			HUDMessage(s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, (-_cos(a) * rdist / 1.0) * 1.0 + 85.0, (_sin(a) * rdist / 1.0) * 1.0 + 170.0,0.03);
		}
		else if(GetActorProperty(tid,APROP_RenderStyle)!=STYLE_None)
		{
			SetFont("GOAL2");
			HUDMessage(s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, (-_cos(a) * rdist / 1.0) * 1.0 + 85.0, (_sin(a) * rdist / 1.0) * 1.0 + 170.0,0.03);
		}
		/*SetFont("SmallFont");
		HUDMessage(i:dist / 32, s:" m"; HUDMSG_PLAIN, 0, CR_RED, 85.0, 240.1, 0.03);*/
	}
}

//SCRIPTS
script "BoA_Objectives"(void) //Call this script to activate and draw the compass
{
	if(compassActive[playerNumber()])
		compassActive[playerNumber()]=0;
	else
		compassActive [playerNumber()]=1;
}

script "UnderwaterBubbles" ENTER
{
	if(GetActorProperty(0,APROP_WATERLEVEL)>=3)
		SpawnForced("PlayerBubble",GetActorX(0)+random(4,8),GetActorY(0),GetActorZ(0)+random(48,52),0,random(0,255));
	delay(7);
	restart;
}

str BossHealth[11] =
{
	"HEALTH00","HEALTH10","HEALTH20","HEALTH30","HEALTH40","HEALTH50",
	"HEALTH60","HEALTH70","HEALTH80","HEALTH90","HEALTHMX"
};
script "MiniBossHealth" ENTER
{
	SetHudSize(640,400,1);
	while(GetActorProperty(0,APROP_Health)<=0)
		delay(1);
	int tid = UniqueTID();
	if(PickActor(0,GetActorAngle(0),GetActorPitch(0),2000.0,tid)&&CheckFlag(tid,"BOSS"))
	{
		SetFont("SMALLFONT");
		HudMessage(s:GetActorProperty(tid,APROP_NameTag); HUDMSG_PLAIN,21,CR_GRAY,320.0,41.0,0.03);
		SetFont(BossHealth[FixedDiv(GetActorProperty(tid,APROP_Health),GetActorProperty(tid,APROP_SpawnHealth))*10/65536]);
		HudMessage(s:"A"; HUDMSG_PLAIN,22,CR_GRAY,320.0,40.0,0.03);
		Thing_ChangeTID(tid,0);
	}
	delay(1);
	restart;
}
script "BossHealth"(int tid,int maxhealth)
{
	SetHudSize(640,400,1);
	while(GetActorProperty(tid,APROP_Health)>0)
	{
		//SetFont("HELTHBAR");
		//hudmessagebold(s:"A"; HUDMSG_PLAIN,3,CR_UNTRANSLATED,160.0,24.0,1.0);
		SetFont("SMALLFONT");
		HudMessageBold(s:GetActorProperty(tid,APROP_NameTag); HUDMSG_PLAIN,1,CR_GRAY,320.0,40.0,0.01);
		SetFont(BossHealth[FixedDiv(GetActorProperty(tid,APROP_Health),GetActorProperty(tid,APROP_SpawnHealth))*10/65536]);
		HudMessageBold(s:"A"; HUDMSG_PLAIN,10,CR_GRAY,320.0,40.0,1.0);
		delay(35);
	}
}

//Teleportscript from Re-Exhumed
script "ExTeleportPlayer" (int teleportID, int destinationID)
{
	int deltaX = GetActorX(playerID) - GetActorX(teleportID);
	int deltaY = GetActorY(playerID) - GetActorY(teleportID);
	//mxd. Warp won't work here, because the activator is ExTeleportIfPlayerBelow or ExTeleportIfPlayerAbove and not a player.
	//mxd. This kinda limits Warp usefulness, dont you think?..
	SetActorPosition(playerID, GetActorX(destinationID) + deltaX, GetActorY(destinationID) + deltaY, GetActorZ(playerID), false);
}

script "ExGetPlayerZ" (void)
{
	SetResultValue(GetActorZ(playerID) >> 16);
}

//Supply Chest Script
Script "SupplyChest"(int supplychestid,int prize)
{
	if(CheckInventory("ChestKey"))
	{
		Thing_Activate(supplychestid);
		Delay(20);
		ActivatorSound("misc/p_pkup",127);
		TakeInventory("ChestKey",1);
		if(prize==1)
			SpawnForced("SupplyChest100Coins",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==2)
			SpawnForced("SupplyChest75Coins",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==3)
		{
			SpawnForced("SupplyChest25Coins",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
			//Special event in C1M1
			spawnspotfacing("RifleGuard",51,0);
		}
		else if(prize==4)
			SpawnForced("SupplyChestKar98k",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==5)
			SpawnForced("SupplyChestBackpack",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==6)
			SpawnForced("SupplyChestGrenades",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
	}
	else
		ActivatorSound("treasure/locked",127);
}