#library "boalib"
#include "zcommon.acs"
#import "stealth.acs" //mxd

#define MAX_VOLUME 127

global int 1:disable_mutants; //mxd. When set to true, Mutant and MutantMelee will immediately despawn after spawning.
global int 2:disable_big_mutants; //mxd. When set to true, BigMutant1 and BigMutant2 will immediately despawn after spawning.
global int 3:disable_supermutants; //mxd. When set to true, UberMutant and SuperMutant will immediately despawn after spawning.
global int 4:astrostein; //[Ed} When set to true, grenades will change to the Astrostein variant
global int 5:HealthScriptDeactivate;
global int 6:mission_number;		//The variable for the mission number

int objectives_on[8];			//Objective display toggle

str objectives[6][2]=
{
	{"",""},
	{"",""},
	{"",""},
	{"",""},
	{"",""},
	{"",""}
};

script "boaobjectives" (void)
{
	if(objectives_on[PlayerNumber()])
		objectives_on[PlayerNumber()]=0;
	else
		objectives_on[PlayerNumber()]=1;
}

script "boaobjectivesset"(int mode,int objnumber,int objtext)
{
	objectives[objnumber][mode]=objtext;
}

script "boaobjectivesdisplay" ENTER
{
	sethudsize(800,600,1);
	If(
		(GetLevelInfo(LEVELINFO_LEVELNUM)==98)||
		(GetLevelInfo(LEVELINFO_LEVELNUM)==99)
	  )
	  Terminate;
	  
	while(!objectives_on[PlayerNumber()])
		delay(1);
		setfont("SMALLFONT");

	int intMsgID = 960;

	int intHeaderCount = 0;

	For (int i = 0; i <= 7; i++)
	{
		SetFont("SMALLFONT");
		int intPosY = 135.0 + (13.0 * (intMsgID - 960)) + 0.1;

		If (i == 0)
		{
			HudMessage(l:"MO_PRIMARY"; HUDMSG_PLAIN, intMsgID++, CR_UNTRANSLATED, 300.1, intPosY, 0.03);
			intHeaderCount++;
		}
		Else If (i == 4)
		{
			HudMessage(l:"MO_SECONDARY"; HUDMSG_PLAIN, intMsgID++, CR_UNTRANSLATED, 300.1, intPosY, 0.03);
			intHeaderCount++;
		}
		Else
		{
			str strOutput = StrParam(l:objectives[i - intHeaderCount][0], l:objectives[i - intHeaderCount][1]);

			If (strLen(strOutput) > 0)
			{
				HudMessage(s:strOutput; HUDMSG_PLAIN, intMsgID++, CR_UNTRANSLATED, 310.1, intPosY, 0.03);

				If (!StrCmp(StrParam(l:objectives[i - intHeaderCount][0]), StrParam(l:"MO_ICON_ACC")))
					SetFont("OBJ_YES");
				Else
					SetFont("OBJ_NO");
				HudMessage(s:"A"; HUDMSG_PLAIN, intMsgID - 10, CR_UNTRANSLATED, 300.1, intPosY + 1.0, 0.03);
			}
		}
	}

	setfont("OBJECTGX");
	hudmessage(s:"A";
		HUDMSG_PLAIN,972,CR_UNTRANSLATED,400.0,115.1,0.03);
	delay(1);	
	restart;
}

script "boaobjectiveaccomplished" (void)
{
	AmbientSound("misc/objective_acc", 57);
	sethudsize(800,600,1);
	setfont("OBJICON");
	hudmessage(s:"A";
		HUDMSG_FADEINOUT,990,CR_UNTRANSLATED,400.0,115.1,1.0,0.5,0.5);
	setfont("SMALLFONT");
	hudmessage(l:"MO_ACCOMP";
		HUDMSG_FADEINOUT,989,CR_UNTRANSLATED,400.0,130.1,1.0,0.5,0.5);
	
}

script "boaobjectiveadded" (void)
{
	AmbientSound("misc/objective_add", 57);
	sethudsize(800,600,1);
	setfont("OBJADD");
	hudmessage(s:"A";
		HUDMSG_FADEINOUT,990,CR_UNTRANSLATED,400.0,115.1,1.0,0.5,0.5);
	setfont("SMALLFONT");
	hudmessage(l:"MO_ADDED";
		HUDMSG_FADEINOUT,989,CR_UNTRANSLATED,400.0,130.1,1.0,0.5,0.5);
	
}

script "MissionNumber" OPEN
{
	if(GetLevelInfo(LEVELINFO_LEVELNUM)<99)					//If it's not a secret mission or the intermap
		mission_number=GetLevelInfo(LEVELINFO_LEVELNUM);	//Set the mission number just in case we warped/started ahead
}

script "BoADialogue"(int headtalky,int headsilent,int message)
{
	// Fade in HUD BGs
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 4, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 1.0);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 1, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 1.0); //mxd

	// Fade in the portrait
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 3, CR_UNTRANSLATED, 21.0, 16.0, 999.0, 1.0, 1.0);

	// Start talk animation
	Delay(35);
	SetFont(headtalky);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	// Show message
	AmbientSound("RADIONOS",127);
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	SetHudWrapWidth(540);
	hudmessagebold(l:message; HUDMSG_TYPEON | HUDMSG_LOG, 2, CR_GRAY, 100.1, 8.1, 999.0, 0.03, 1.0);

	// Stop talk animation
	delay(5*35);
	SetHudSize(320, 200, true);
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	delay(5*35);

	// Fade out the portrait
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0, 0.0, 1.0);

	//Fade out HUD BGs
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 4, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 1.0);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, 1, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 1.0); //mxd

	//Fade out the message
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	SetHudWrapWidth(540);
	hudmessagebold(l:message; HUDMSG_FADEINOUT, 2, CR_GRAY, 100.1, 8.1, 0.0, 0.0, 1.0);
}

//sprinting stamina
int cooldown[8];

script "Dashing" ENTER
{
	if(!CheckActorClass(0,"BoAPlayer"))
		terminate;
	int buttons = GetPlayerInput(-1,INPUT_BUTTONS);
	if((buttons & BT_SPEED) && (buttons & BT_FORWARD) && !(buttons & BT_CROUCH) && CheckInventory("Stamina") && cooldown[PlayerNumber()] <= 0)
	{
		SetActorProperty(0,APROP_SPEED,2.0);
		TakeInventory("Stamina",random(1,3)); //more stamina to use
	}
	else
	{
		SetActorProperty(0,APROP_SPEED,1.0);
		cooldown[PlayerNumber()]--;
		delay(random(1,3)); //recovery is more fast
		GiveInventory("Stamina",1);
	}
	if(!CheckInventory("Stamina"))
		cooldown[PlayerNumber()]=100;
	delay(1);
	restart;
}

Script "Exhausted" ENTER
{
	if(!CheckActorClass(0,"BoAPlayer")||GameType()==GAME_TITLE_MAP)
		terminate;
	while(CheckInventory("Stamina")<25)
	{
		if(GetActorProperty(0,APROP_WATERLEVEL)<3)
			PlaySound(0,"player/breathing",CHAN_VOICE);
		Delay(50);
	}
	Delay(1);
	restart;
}

//mxd. Mutants despawn checks
script "DisableMutants" (void)
{
	if(disable_mutants) Thing_Remove(0);
}

script "DisableBigMutants" (void)
{
	if(disable_big_mutants) Thing_Remove(0);
}

script "DisableSuperMutants" (void)
{
	if(disable_supermutants) Thing_Remove(0);
}

//Astrostein check
script "AstrosteinCheck" (void)
{
	SetResultValue(astrostein);
}

//Compass
bool compassActive[8];

int dots;		//Items to appear on compass
int marks[50];	//Items with tids

//FUNCTIONS
function int _cos(int a)
{
	a%=1.0;
	if(a<0)
		a+=1.0;
	if(a>0.5)
		a=-a+1.0;
	return cos(a);
}

function int _sin(int a)
{
	return _cos(a+0.25);
}

script "BoA_Compass" ENTER
{
	if(compassActive[playerNumber()])
	{
		SetHUDSize(1024,768,1);
		int a=GetActorAngle(0);
		int x=-_cos(a)*34/1.0,y=_sin(a)*34/1.0;
		SetFont("COMPASS1");
		HUDMessage(s:"N"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,x * 1.0 + 85.0,y * 1.0 + 170.0,0.03);
		HUDMessage(s:"S"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,-x * 1.0 + 85.0,-y * 1.0 + 170.0,0.03);
		HUDMessage(s:"E"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,-y * 1.0 + 85.0,x * 1.0 + 170.0,0.03);
		HUDMessage(s:"W"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,y * 1.0 + 85.0,-x * 1.0 + 170.0,0.03);
		SetFont("COMPASS");
		HUDMessage(s:"A"; HUDMSG_PLAIN,0,CR_UNTRANSLATED,85.0,162.0,0.03);
		for(int i=0;i<dots;i++)
			drawdot(4000+i);
		for(i=0;marks[i]!=0;i++)
			drawdot(marks[i]);
	}
	Delay(1);
	restart;
}

script "BoA_CompassQueue"(void)
{
	if(ActivatorTID())
	{
		int i;
		while(marks[i]!=0)
			i++;
		marks[i]=ActivatorTID();
	}
	else
		Thing_ChangeTID(0,4000+dots++);
}

function void drawdot(int tid)
{
	SetHUDSize(1024,768,1);
	if(GetActorProperty(tid,APROP_Health)>0)
	{
		int dx = GetActorX(0) - GetActorX(tid),dy = GetActorY(0) - GetActorY(tid);
		int a = GetActorAngle(0) - VectorAngle(dx, dy) - 0.25;
		dx /= 1.0;
		dy /= 1.0;
		int dist = sqrt(dx*dx + dy*dy),rdist = dist / 10;
		if(rdist > 33)
			rdist = 33;
		if(CheckActorClass(tid,"Akten")||CheckActorClass(tid,"AktenEisenmann")||CheckActorClass(tid,"SpearOfDestiny"))
		{
			SetFont("GOAL1");
			HUDMessage(s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, (-_cos(a) * rdist / 1.0) * 1.0 + 85.0, (_sin(a) * rdist / 1.0) * 1.0 + 170.0,0.03);
		}
		else if(GetActorProperty(tid,APROP_RenderStyle)!=STYLE_None)
		{
			SetFont("GOAL2");
			HUDMessage(s:"A"; HUDMSG_PLAIN, 0, CR_UNTRANSLATED, (-_cos(a) * rdist / 1.0) * 1.0 + 85.0, (_sin(a) * rdist / 1.0) * 1.0 + 170.0,0.03);
		}
		/*SetFont("SmallFont");
		HUDMessage(i:dist / 32, s:" m"; HUDMSG_PLAIN, 0, CR_RED, 85.0, 240.1, 0.03);*/
	}
}

//SCRIPTS
script "BoA_Objectives"(void) //Call this script to activate and draw the compass
{
	if(compassActive[playerNumber()])
		compassActive[playerNumber()]=0;
	else
		compassActive [playerNumber()]=1;
}

script "UnderwaterBubbles" ENTER
{
	if(GetActorProperty(0,APROP_WATERLEVEL)>=3 && GetCVar("bubbleswitch")) //check also stored cvar for custom tweaks
		SpawnForced("PlayerBubble",GetActorX(0)+random(4,8),GetActorY(0),GetActorZ(0)+random(48,52),0,random(0,255));
	delay(7);
	restart;
}

str BossHealth[11] =
{
	"HEALTH00","HEALTH10","HEALTH20","HEALTH30","HEALTH40","HEALTH50",
	"HEALTH60","HEALTH70","HEALTH80","HEALTH90","HEALTHMX"
};
script "MiniBossHealth" ENTER
{
	SetHudSize(640,400,1);
	while(GetActorProperty(0,APROP_Health)<=0)
		delay(1);
	int tid = UniqueTID();
	if(PickActor(0,GetActorAngle(0),GetActorPitch(0),2000.0,tid)&&CheckFlag(tid,"BOSS"))
	{
		SetFont("SMALLFONT");
		HudMessage(s:GetActorProperty(tid,APROP_NameTag); HUDMSG_PLAIN,21,CR_GRAY,320.0,41.0,0.03);
		SetFont(BossHealth[FixedDiv(GetActorProperty(tid,APROP_Health),GetActorProperty(tid,APROP_SpawnHealth))*10/65536]);
		HudMessage(s:"A"; HUDMSG_PLAIN,22,CR_GRAY,320.0,40.0,0.03);
		Thing_ChangeTID(tid,0);
	}
	delay(1);
	restart;
}
script "BossHealth"(int tid,int maxhealth)
{
	SetHudSize(640,400,1);
	while(GetActorProperty(tid,APROP_Health)>0)
	{
		SetFont("SMALLFONT");
		HudMessageBold(s:GetActorProperty(tid,APROP_NameTag); HUDMSG_PLAIN,21,CR_GRAY,320.0,41.0,0.03);
		SetFont(BossHealth[FixedDiv(GetActorProperty(tid,APROP_Health),GetActorProperty(tid,APROP_SpawnHealth))*10/65536]);
		HudMessageBold(s:"A"; HUDMSG_PLAIN,22,CR_GRAY,320.0,40.0,0.03);
		delay(1);
	}
}

//Teleportscript from Re-Exhumed
script "ExTeleportPlayer" (int teleportID, int destinationID)
{
	int deltaX = GetActorX(playerID) - GetActorX(teleportID);
	int deltaY = GetActorY(playerID) - GetActorY(teleportID);
	//mxd. Warp won't work here, because the activator is ExTeleportIfPlayerBelow or ExTeleportIfPlayerAbove and not a player.
	//mxd. This kinda limits Warp usefulness, dont you think?..
	SetActorPosition(playerID, GetActorX(destinationID) + deltaX, GetActorY(destinationID) + deltaY, GetActorZ(playerID), false);
}

script "ExGetPlayerZ" (void)
{
	SetResultValue(GetActorZ(playerID) >> 16);
}

//Supply Chest Script
Script "SupplyChest"(int supplychestid,int prize)
{
	if(CheckInventory("ChestKey"))
	{
		Thing_Activate(supplychestid);
		Delay(1);
		ActivatorSound("misc/p_pkup",127);
		TakeInventory("ChestKey",1);
		if(prize==1)
			SpawnForced("SupplyChest100Coins",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==2)
			SpawnForced("SupplyChest75Coins",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==3)
		{
			SpawnForced("SupplyChest25Coins",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
			//Special event in C1M1
			spawnspotfacing("RifleGuard",51,0);
		}
		else if(prize==4)
			SpawnForced("SupplyChestKar98k",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==5)
			SpawnForced("SupplyChestBackpack",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
		else if(prize==6)
			SpawnForced("SupplyChestGrenades",GetActorX(supplychestid),GetActorY(supplychestid),GetActorZ(supplychestid));
	}
	else
		ActivatorSound("treasure/locked",127);
}

//Clear Inventory - now added Astrostein stuff (Ozy81)
script "CLEAR INVENTORY"(void)
{
	TakeInventory("9mmAmmo", 9999);
	TakeInventory("12GaugeAmmo", 9999);
	TakeInventory("MauserAmmo", 9999);
	TakeInventory("FlameAmmo", 9999);
	TakeInventory("NebAmmo", 9999);
	TakeInventory("PanzerAmmo", 9999);
	TakeInventory("AstroShotgunShell", 9999); //Astros
	TakeInventory("AstroRocketAmmo", 9999); //Astros
	TakeInventory("AstroClipAmmo", 9999); //Astros
	Takeinventory("KnifeSilent", 9999);
	TakeInventory("Shovel", 9999);
	TakeInventory("Firebrand", 9999);
	TakeInventory("Luger9mm", 9999);
	TakeInventory("Walther9mm", 9999);
	TakeInventory("TrenchShotgun", 9999);
	TakeInventory("Browning5", 9999);
	TakeInventory("MP40", 9999);
	TakeInventory("Sten", 9999);
	TakeInventory("G43", 9999);
	TakeInventory("Kar98k", 9999);
	TakeInventory("Pyrolight", 9999);
	TakeInventory("Nebelwerfer", 9999);
	TakeInventory("Panzerschreck", 9999);
	TakeInventory("UMG43", 9999);
	TakeInventory("GrenadePickup", 9999); //mxd
	TakeInventory("AstroGrenadePickup", 9999); //Astros
	TakeInventory("AstroShotgun", 9999); //Astros
	TakeInventory("AstroRocketlauncher", 9999); //Astros
	TakeInventory("AstroChaingun", 9999); //Astros
	TakeInventory("AstrosteinMelee", 9999); //Astros
	GiveInventory("Browning5Loaded",9999);
	GiveInventory("PyrolightLoaded",9999);
	GiveInventory("G43Loaded",9999);
	GiveInventory("Kar98kLoaded",9999);
	GiveInventory("Luger9mmLoaded",9999);
	GiveInventory("MP40Loaded",9999);
	GiveInventory("Walther9mmLoaded",9999);
	GiveInventory("PanzerschreckLoaded",9999);
	GiveInventory("TrenchShotgunLoaded",9999);
	GiveInventory("StenLoaded",9999);
	GiveInventory("AstroShotgunLoaded",9999); //Astros
	GiveInventory("AstroChaingunLoaded",9999); //Astros
	GiveInventory("AstroRocketLauncherLoaded",9999); //Astros
	TakeInventory("BoABlueKey",1);
	TakeInventory("BoAYellowKey",1);
	TakeInventory("BoARedKey",1);
	TakeInventory("BoACyanKey",1);
	TakeInventory("BoAGreenKey",1);
	TakeInventory("BoAPurpleKey",1);
	TakeInventory("AstroBlueKey",1); //Astros
	TakeInventory("AstroYellowKey",1); //Astros
	TakeInventory("AstroRedKey",1); //Astros
	TakeInventory("Akten",1);
	TakeInventory("CutsceneEnabled", 1);
}

/*
  SetMusicVolumeFactor 
	Sets the multiplier for music volume (128 is half volume, 256 is full volume, 
	512 is double volume, etc.), over the delay specified in tics.

	Example:
	    ACS_NamedExecuteAlways("SetMusicVolumeFactor", 0, 128, 70);

	This will fade the music to half volume over 2 seconds (70 tics).
*/
int intSetVolume = 1.0;
Script "SetMusicVolumeFactor" (int intTargetVolume, int intDelay)
{
	intTargetVolume *= 256;

	If (intDelay > 0)
	{
		int intStepSize = (intSetVolume - intTargetVolume) / intDelay;

		For (int i = 0; i <= intDelay; i++)
		{
			SetMusicVolume(intSetVolume - (intStepSize * i));
			Delay(1);
		}
	}

	SetMusicVolume(intTargetVolume);
	intSetVolume = intTargetVolume;
}

Script "QuickKick" (void)
{
	If (
		(CheckInventory("Stamina") < 30) || 
		(CheckInventory("Health") < 30) ||
		(GetSpeed(0) > 30) ||
		(GetActorViewHeight(0) >> 16 < 56) ||
		(GetLevelInfo(LEVELINFO_LEVELNUM)==99) //let's remove the kick while on HQs - ozy81
	)
		Terminate; //No kicking unless you're in good health, have stamina, aren't walking, and aren't crouching

	str strPrevWeapon = GetWeapon(); //Assign previous weapon name to a variable - gets "None" if there is none

	SetPlayerProperty(0, 1, PROP_INSTANTWEAPONSWITCH); //Enable fast weapon switch

	While (!SetWeapon("BJKickAuto")) //Give the player the auto-kick
	{
		GiveInventory("BJKickAuto", 1);
		Delay(1);
	}

	Delay(25); //Wait for the animation and attack

	If (StrICmp(strPrevWeapon, "None")) //Reset the old weapon
		While (!SetWeapon(strPrevWeapon)) Delay(5);

	TakeInventory("BJKickAuto", 1); //Remove the auto-kick from inventory

	SetPlayerProperty(0, 0, PROP_INSTANTWEAPONSWITCH); //Disable fast weapon switch
}

Function int GetSpeed(int tid)
{
	int x = GetActorVelX(tid);
	int y = GetActorVelY(tid);
	int z = GetActorVelZ(tid);

	int speed = (FixedMul(x, x) + FixedMul(y, y) + FixedMul(z, z)) >> 16;

	return speed;
}

//OzyStuff... but not exactly made only by Ozy :P

//fadescript for map setup
script "Maplaunch" ENTER
{
	FadeRange(0,0,0,1.0,0,0,0,0.0,1.5);
}

//underwater sounds
script "Underwater" ENTER
{
	if(GetActorProperty(0,APROP_WATERLEVEL)>=3)
	{
		delay(3);
		localambientsound("underwtr",random(90,127));
	}
	delay(35*8);	//only 1 sound is 8sec long, 2 4sec & 1 2.5sec
	restart;
}

//death script
script "OhNoes!" DEATH
{
	SetHudSize(320, 240, true);
	LocalSetMusic("THEEND");
	
	SetFont("fade");
	HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1000, CR_UNTRANSLATED, 160.0, 120.0, 999999.0, 6.0, 1.0);
	
	// [ZK] If you resurrect, the death screen should disappear immediately
	for (int i = 0; i < 35*6; i++)
	{
		Delay(1);
		
		if (GetActorProperty(0, APROP_HEALTH) > 0)
		{	
			SetFont("fade");
			HudMessage(s:""; HUDMSG_PLAIN, -1000, CR_UNTRANSLATED, 0.0, 0.0, 0.0, 0.0);
			LocalSetMusic("*");
			terminate;
		}
	}
	
	SetFont("youdied");
	HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1001, CR_UNTRANSLATED, 160.0, 120.0, 999999.0, 3.0, 1.0);
	
	// [ZK] Delay 1 tic instead of 35
	while(GetActorProperty(0,APROP_HEALTH) <= 0) Delay(1);
	
	//fadeback if resurrected
	HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1001, CR_UNTRANSLATED, 160.0, 120.0, 0.0, 0.0, 0.25);	
	SetFont("fade");
	HudMessage(s:"A"; HUDMSG_FADEINOUT | HUDMSG_NOWRAP | HUDMSG_LAYER_OVERHUD, -1000, CR_UNTRANSLATED, 160.0, 120.0, 0.0, 0.0, 1.0);
	
	// [ZK] restore music
	LocalSetMusic("*");
}

//lowhealth scripts
script "30Health" ENTER
{
	int width = 640, height = 480;
	SetHudSize(width, height, 0);
	SetFont("M_INJ");

	// Half width and height (in fixed-point).
	int half_width  = (width / 2) << 16;
	int half_height = (height / 2) << 16;

	while (true)
	{
		int health = GetActorProperty(0, APROP_HEALTH);
		if (!HealthScriptDeactivate && health > 0 && health <= 30)
		{
			HudMessage(s:"A"; HUDMSG_FADEINOUT, 0, CR_WHITE, half_width, half_height, 0.0, 0.5, 0.5);

			// Volume and delay of heartbeat (faster and louder with less health).
			int volume = MAX_VOLUME;
			int delay1 = 10;
			int delay2 = 14;

			if (health > 20)
			{
				volume = MAX_VOLUME - 50;
				delay1 = 21;
				delay2 = 34;
			}
			else if (health > 10)
			{
				volume = MAX_VOLUME - 25;
				delay1 = 18;
				delay2 = 24;
			}

			LocalAmbientSound("hbeat", volume);
			Delay(delay1);
			LocalAmbientSound("hbeat", volume);
			Delay(delay2);
		}

		Delay(1);
	}
}
