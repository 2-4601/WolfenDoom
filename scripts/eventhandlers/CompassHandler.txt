class CompassHandler : EventHandler
{
	Array<Actor> ScannableThings;
	Array<String> ThingIcons;
	const compassX = 85.0;
	const compassY = 105.0;
	const compassIconSize = 12.0;
	const pointRadius = 34.0;
	const distFactor = 0.1;

	static clearscope String GetDefaultIcon(Actor thing)
	{
		String txName;
		if (thing is "ObjectiveIcon")
		{
			txName = "GOAL3";
		}
		else
		{
			txName = "GOAL1";
		}
		if (thing.GetRenderStyle() != STYLE_None)
		{
			txName = "GOAL2";
		}
		return txName;
	}

	void Add(Actor thing, String iconName = "")
	{
		ScannableThings.Push(thing);
		if (iconName == "")
		{
			iconName = CompassHandler.GetDefaultIcon(thing);
		}
		ThingIcons.Push(iconName);
	}

	override void WorldThingDestroyed(WorldEvent e)
	{
		int i = ScannableThings.Find(e.Thing);

		if (i < ScannableThings.Size())
		{
			ScannableThings.Delete(i, 1);
			ThingIcons.Delete(i, 1);
			ScannableThings.ShrinkToFit();
			ThingIcons.ShrinkToFit();
		}
	}

	override void RenderOverlay( RenderEvent e )
	{
		PlayerInfo p = players[consoleplayer];

		if (!p || !p.mo) { return; }

		BoACompass cmps = BoACompass(p.mo.FindInventory("BoACompass"));

		if (cmps && cmps.active && screenblocks < 12)
		{
			// Find compass and background textures
			TextureID cmpsbg = TexMan.CheckForTexture("COMPASS", TexMan.Type_Any);
			TextureID cmpsrose = TexMan.CheckForTexture("COMP_BKG", TexMan.Type_Any);

			// Draw the compass itself
			DrawToHUD.DrawTexture(cmpsbg, (compassX, compassY - 6.0));

			CVar compasstype = CVar.GetCVar("oldcompass");
			bool oldstyle = compasstype ? compasstype.GetInt() : false;

			if (!oldstyle)
			{
				// Draw the background compass directions
				DrawToHUD.DrawShapeTexture(cmpsrose, (compassX, compassY), 1.0, e.ViewAngle - 90); // Use player angle, offset so that 90 degrees on the map is shown as north
			}
			else
			{
				// Find compass point textures
				TextureID north = TexMan.CheckForTexture("NORTH", TexMan.Type_Any);
				TextureID east = TexMan.CheckForTexture("EAST", TexMan.Type_Any);
				TextureID south = TexMan.CheckForTexture("SOUTH", TexMan.Type_Any);
				TextureID west = TexMan.CheckForTexture("WEST", TexMan.Type_Any);

				// Draw compass points

				DrawToHUD.DrawTexture(west, (-sin(e.ViewAngle) * pointRadius + compassX, cos(e.ViewAngle) * pointRadius + compassY));
				DrawToHUD.DrawTexture(east, (sin(e.ViewAngle) * pointRadius + compassX, -cos(e.ViewAngle) * pointRadius + compassY));
				DrawToHUD.DrawTexture(south, (cos(e.ViewAngle) * pointRadius + compassX, sin(e.ViewAngle) * pointRadius + compassY));
				DrawToHUD.DrawTexture(north, (-cos(e.ViewAngle) * pointRadius + compassX, -sin(e.ViewAngle) * pointRadius + compassY));
			}

			// Draw icons
			for (int i = 0; i < ScannableThings.Size(); i++)
			{
				Actor mo = ScannableThings[i];
				if (!mo) continue;
				if (mo is "Inventory" && Inventory(mo).Owner) continue;

				TextureID icon = TexMan.CheckForTexture(ThingIcons[i], TexMan.Type_Any);
				Vector2 relativeLocation = LevelLocals.Vec2Diff(e.ViewPos.xy, mo.pos.xy);

				// Account for chasecam
				if (p.cheats & CF_CHASECAM != 0)
				{
					CVar chaseDist = CVar.GetCVar("chase_dist", p);
					Vector2 chaseDiff = Actor.AngleToVector(e.ViewAngle, chaseDist.GetFloat() * cos(e.ViewPitch));
					relativeLocation -= chaseDiff;
				}

				relativeLocation.Y *= -1;

				relativeLocation = Actor.RotateVector(relativeLocation, e.ViewAngle - 90);

				if (relativeLocation.Length() * distFactor > pointRadius)
				{
					relativeLocation = relativeLocation.Unit() * pointRadius / distFactor;
				}

				double iconX = compassX + relativeLocation.X * distFactor;
				double iconY = compassY + relativeLocation.Y * distFactor;

				// Get the image size and scale it down if necessary
				Vector2 size = TexMan.GetScaledSize(icon);
				double maxsize = max(size.x, size.y);
				double scale = 1.0;

				// Scale the image down to the max icon size set in constant above.  Smaller images will stay as they are
				if (maxsize > compassIconSize) { scale = compassIconSize / maxsize; }

				// Fade the icon the farther away the thing is
				double alpha = clamp(2048 / p.mo.Distance3D(mo), 0.4, 0.95);

				// Draw the icon
				DrawToHUD.DrawTexture(icon, (iconX, iconY), alpha, scale);
			}

			// Redraw the compass texture on top with a lower alpha so that the glass actually looks translucent
			DrawToHUD.DrawTexture(cmpsbg, (compassX, compassY - 6.0), 0.5);
		}
	}
}