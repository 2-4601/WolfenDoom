
class TcPostProcessShaderHandler : StaticEventHandler
{
	override void RenderOverlay(RenderEvent e)
	{
		// get correct player
		PlayerInfo p = players[consoleplayer];
		
		if (Cvar.GetCVar("tc_pp_lensflares", p).GetInt() > 0)			EnableLensFlares();
		else														DisableLensFlares();
		
		if (Cvar.GetCVar("tc_pp_vignette", p).GetInt() > 0)			EnableVignette();
		else														DisableVignette();
		
		if (Cvar.GetCVar("tc_pp_noise", p).GetInt() > 0)
		{
			Shader.SetUniform1f(p, "noiseshader", "timer", gametic + e.FracTic);
			EnableNoise();
		}
		else														DisableNoise();
	}

	//===========================================================================
	// LENS FLARES
	//===========================================================================
	
	ui void EnableLensFlares(void)
	{
		PlayerInfo p = players[consoleplayer];
		
		double threshold = CVar.GetCVar("tc_pp_lensflares_threshold", p).GetFloat();
		double distance = CVar.GetCVar("tc_pp_lensflares_distance", p).GetFloat();
		double amount = CVar.GetCVar("tc_pp_lensflares_amount", p).GetFloat();
		double samples = CVar.GetCVar("tc_pp_lensflares_samples", p).GetInt();
		Shader.SetUniform1f(p, "lensflareshader", "threshold", threshold);
		Shader.SetUniform1f(p, "lensflareshader", "distance", distance);
		Shader.SetUniform1f(p, "lensflareshader", "samples", samples);
		Shader.SetUniform1f(p, "lensflareshader", "amount", amount);
		Shader.SetEnabled(p, "lensflareshader", true);
	}

	ui void DisableLensFlares(void)
	{
		PlayerInfo p = players[consoleplayer];
		Shader.SetEnabled(p, "lensflareshader", false);
	}
	
	//===========================================================================
	// VIGNETTE (BY NASH)
	//===========================================================================
	
	ui void EnableVignette(void)
	{
		PlayerInfo p = players[consoleplayer];
		double i = CVar.GetCVar("tc_pp_vignette_intensity", p).GetFloat();
		double f = CVar.GetCVar("tc_pp_vignette_falloff", p).GetFloat();
		Shader.SetUniform1f(p, "vignetteshader", "intensity", i);
		Shader.SetUniform1f(p, "vignetteshader", "falloff", f);
		Shader.SetEnabled(p, "vignetteshader", true);
	}

	ui void DisableVignette(void)
	{
		PlayerInfo p = players[consoleplayer];
		Shader.SetEnabled(p, "vignetteshader", false);
	}
	
	//===========================================================================
	// NOISE
	//===========================================================================
	
	ui void EnableNoise(void)
	{
		PlayerInfo p = players[consoleplayer];
		double i = CVar.GetCVar("tc_pp_noise_amount", p).GetFloat();
		Shader.SetUniform1f(p, "noiseshader", "amount", i);
		Shader.SetEnabled(p, "noiseshader", true);
	}

	ui void DisableNoise(void)
	{
		PlayerInfo p = players[consoleplayer];
		Shader.SetEnabled(p, "noiseshader", false);
	}
}
