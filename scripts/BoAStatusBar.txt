class BoAStatusBar : BaseStatusBar
{
	HUDFont mBigFont;
	HUDFont mHUDFont;
	HUDFont mSmallFont;
	InventoryBarState diparms;
	DynamicValueInterpolator mAirInterpolator;
	DynamicValueInterpolator mBatteryInterpolator;
	DynamicValueInterpolator mOilInterpolator;
	DynamicValueInterpolator mSpaceSuitInterpolator;
	DynamicValueInterpolator mStaminaInterpolator;
	DynamicValueInterpolator mSuspicionInterpolator;
	DynamicValueInterpolator mVisibilityInterpolator;

	bool stealth;
	double basealpha;
	double healthbaralpha;
	double velocity, oldangle, oldpitch;
	int alertedcount;
	int barstate;
	int LastHealth;
	int LastMaxHealth;
	String LastIcon;
	String LastTag;
	double hour, minute, second;

	override void Init()
	{
		Super.Init();
		SetSize(32, 320, 200);
		CompleteBorder = True;

		// Create the fonts used
		mBigFont = HUDFont.Create("BIGFONT", 0);
		mSmallFont = HUDFont.Create("SMALLFONT", 2);
		mHUDFont = HUDFont.Create("THREEFIV", 1);

		diparms = InventoryBarState.Create();

		mAirInterpolator = DynamicValueInterpolator.Create(0, 1.25, 1, 40);
		mBatteryInterpolator = DynamicValueInterpolator.Create(0, 1.25, 1, 40);
		mOilInterpolator = DynamicValueInterpolator.Create(0, 1.25, 1, 40);
		mSpaceSuitInterpolator = DynamicValueInterpolator.Create(0, 1.25, 1, 40);
		mStaminaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mSuspicionInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mVisibilityInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
	}

	override void NewGame ()
	{
		Super.NewGame();

		mAirInterpolator.Reset(0);
		mBatteryInterpolator.Reset(0);
		mOilInterpolator.Reset(0);
		mSpaceSuitInterpolator.Reset(0);
		mStaminaInterpolator.Reset(0);
		mSuspicionInterpolator.Reset(0);
		mVisibilityInterpolator.Reset(0);
	}

	override void Tick()
	{
		Super.Tick();

		mAirInterpolator.Update(GetAirTime());
		mStaminaInterpolator.Update(GetAmount("Stamina")); // This is a custom inventory item, not CPlayer.mo.stamina!

		if (CheckInventory("MineSweeper", 1)) { mBatteryInterpolator.Update(GetAmount("Power")); }
		if (CheckInventory("LanternPickup", 1)) { mOilInterpolator.Update(GetAmount("LanternOil")); }
		if (CheckInventory("PowerSpaceSuit", 1)) { mSpaceSuitInterpolator.Update(CPlayer.mo.GetEffectTicsForItem("SpaceSuit")); }

		Inventory vis = CPlayer.mo.FindInventory("BoAVisibility");
		if (vis)
		{
			mVisibilityInterpolator.Update(BoAVisibility(vis).visibility);

			alertedcount = BoAVisibility(vis).alertedcount;

			if (alertedcount)
			{
				mSuspicionInterpolator.Update(100);  // Force the suspicion level to 100% if sneakable enemies are alerted
			}
			else  // Otherwise use actual suspicion level
			{
				mSuspicionInterpolator.Update(BoAVisibility(vis).suspicion);
			}
		}
	}

	override void Draw (int state, double TicFrac)
	{
		if (!automapactive && CPlayer.mo.FindInventory("DreamState"))
		{
			TextureID tex = TexMan.CheckForTexture("DREAMING", TexMan.Type_MiscPatch);
			if (tex.IsValid()) {
				double ratio = screen.GetAspectRatio();

				int basewidth = 320;
				int baseheight = 240;

				// Calculate width and height to keep the image at the same relative size, regardless of aspect ratio
				double width = ratio > 1.25 ? baseheight * ratio : basewidth;
				double height = ratio < 1.25 ? basewidth / ratio : baseheight;

				TexMan.SetCameraToTexture(CPlayer.mo, "DREAMING", int(CPlayer.fov)); // Use player's FOV for the camera FOV

				double targetvelocity = CPlayer.mo.vel.x * CPlayer.mo.vel.x + CPlayer.mo.vel.y * CPlayer.mo.vel.y + CPlayer.mo.vel.z * CPlayer.mo.vel.z + abs(oldangle - CPlayer.mo.angle) * 20 + abs(oldpitch - CPlayer.mo.pitch) * 20;

				if (velocity < targetvelocity) { velocity = velocity < 50 ? velocity + 1 : velocity; }
				else if (velocity > 0) { velocity -= 1; }
				else { velocity = 0; }

				double alpha = min(sin(velocity), 0.4);

				double x = cos(level.time % 360) * 8;
				double y = sin(level.time % 360) * 8;

				screen.DrawTexture(tex, false, (width / 2) + x, (height / 2) + y, DTA_Clean, true, DTA_CenterOffset, true, DTA_KeepRatio, true, DTA_VirtualWidthF, width, DTA_VirtualHeightF, height, DTA_Alpha, alpha / 2);
				screen.DrawTexture(tex, false, (width / 2) - x, (height / 2) - y, DTA_Clean, true, DTA_CenterOffset, true, DTA_KeepRatio, true, DTA_VirtualWidthF, width, DTA_VirtualHeightF, height, DTA_Alpha, alpha / 2);

				x = sin(level.time % 360) * 16;
				y = cos(level.time % 360) * 16;

				screen.DrawTexture(tex, false, (width / 2) + x, (height / 2) + y, DTA_Clean, true, DTA_CenterOffset, true, DTA_KeepRatio, true, DTA_VirtualWidthF, width, DTA_VirtualHeightF, height, DTA_Alpha, max(0, alpha / 2 - .15));
				screen.DrawTexture(tex, false, (width / 2) - x, (height / 2) - y, DTA_Clean, true, DTA_CenterOffset, true, DTA_KeepRatio, true, DTA_VirtualWidthF, width, DTA_VirtualHeightF, height, DTA_Alpha, max(0, alpha / 2 - .15));
			}

			if (level.time % 35)
			{
				oldangle = CPlayer.mo.angle;
				oldpitch = CPlayer.mo.pitch;
			}
		}

		Super.Draw (state, TicFrac);

		if (CPlayer.mo.FindInventory("CutsceneEnabled") || CPlayer.morphtics)
		{
			if (automapactive || state == HUD_StatusBar)
			{
				BeginStatusBar();
				DrawImage("AMBAR", (-54, 152), DI_ITEM_OFFSETS);
			}

			if (!automapactive && CPlayer.morphtics && CPlayer.mo is "ShermanPlayer")
			{
				DrawTankStatusBar();
			}

			return;
		}

		if (!automapactive)
		{
			// Draw fullscreen overlays, regardless of status bar state
			BeginHUD(1, True);
				DrawHealthBars();

				//Draw Mask for Space Suit
				if (CheckInventory("PowerSpaceSuit", 1))
				{
					int current, max;
					[current, max] = CPlayer.mo.GetEffectTicsForItem("SpaceSuit");

					current = mSpaceSuitInterpolator.GetValue();
					DrawBar("HORZSP2F", "HORZSP2E", current, max, (-18, 73), 0, SHADER_HORZ, DI_SCREEN_CENTER | DI_ITEM_OFFSETS);
				}

				DrawCrosshairHint();

				if (GetGlobalACSValue(60) > -1) { DrawDayNightState(); }
			BeginHUD(1, False);

			barstate = state;

			if (state == HUD_StatusBar)
			{
				BeginStatusBar(False);
				DrawMainBar(TicFrac);
			}
			else if (state == HUD_Fullscreen)
			{
				BeginHUD(1, False);
				DrawFullScreenStuff ();
			}
		}
		else
		{
			BeginStatusBar();
			DrawImage("AMBAR", (-54, 152), DI_ITEM_OFFSETS);
		}
	}

	protected void DrawMainBar (double TicFrac)
	{
		int current, max;

		DrawImage("HUDBAR", (-54, 152), DI_ITEM_OFFSETS);

		DrawVisibilityBar((85, 162), scale: 0.5);

		//Minesweeper & Lantern
		if (CheckInventory("MineSweeper", 1))
		{
			int current, max;
			current = mBatteryInterpolator.GetValue();
			max = GetMaxAmount("Power");

			MineSweeper ms = MineSweeper(CPlayer.mo.FindInventory("MineSweeper"));

			if (ms && ms.active)
			{
				DrawImage("SWEP_BAK", (152, 138), DI_SCREEN_OFFSETS);
				DrawBar("SWEP_ON", "SWEP_OFF", current, max, (152, 138), 0, SHADER_HORZ, DI_SCREEN_OFFSETS);
			}
		}

		if (CheckInventory("LanternPickup", 1))
		{
			int current, max;
			current = mOilInterpolator.GetValue();
			max = GetMaxAmount("LanternOil");

			LanternPickup l = LanternPickup(CPlayer.mo.FindInventory("LanternPickup"));

			if (l && l.active)
			{
				DrawImage("LANT_BAK", (152, 138), DI_SCREEN_OFFSETS);
				DrawBar("LANT_ON", "LANT_OFF", current, max, (152, 138), 0, SHADER_VERT | SHADER_REVERSE, DI_SCREEN_OFFSETS);
			}
		}

		//AirControl & Stamina
		DrawBar("HORZAIRF", "HORZAIRE", mAirInterpolator.GetValue(), level.airsupply, (36, 160), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		DrawBar("HORZSTMF", "HORZSTME", mStaminaInterpolator.GetValue(), 100, (88, 160), 0, SHADER_HORZ, DI_ITEM_OFFSETS);

		//Ammo
		Ammo ammo1, ammo2;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		if (ammo1) { DrawString(mBigFont, FormatNumber(ammocount1, 3), (225, 171), DI_TEXT_ALIGN_RIGHT); }
		if (ammo2) { DrawString(mBigFont, FormatNumber(ammocount2, 3), (225, 185), DI_TEXT_ALIGN_RIGHT); }

		//Ammo Icons
		DrawInventoryIcon(ammo1, (231, 170), DI_ITEM_OFFSETS);
		DrawInventoryIcon(ammo2, (231, 184), DI_ITEM_OFFSETS);

		//Weapon
		DrawString(mHUDFont, GetWeaponTag(), (190, 159), DI_TEXT_ALIGN_CENTER);

		//Time
		String time = level.TimeFormatted();

		if (hour || minute || second)
		{
			time = FormatNumber(int(hour), 2, 2, FNF_FILLZEROS) .. ":" .. FormatNumber(int(minute), 2, 2, FNF_FILLZEROS) .. ":" .. FormatNumber(int(second), 2, 2, FNF_FILLZEROS);
		}

		DrawString(mHUDFont, time, (250, 159));

		//Health
		DrawString(mBigFont, FormatNumber(CPlayer.health, 3), (52, 171), DI_TEXT_ALIGN_RIGHT);
		DrawString(mBigFont, "%", (65, 171), DI_TEXT_ALIGN_RIGHT);

		//Armor
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		if (armor != null && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (4, 184), DI_ITEM_OFFSETS);
			DrawString(mBigFont, FormatNumber(GetArmorAmount(), 3), (52, 185), DI_TEXT_ALIGN_RIGHT);
			DrawString(mBigFont, "%", (65, 185), DI_TEXT_ALIGN_RIGHT);
		}

		//Money
		DrawString(mBigFont, FormatNumber(GetAmount("CoinItem")), (138, 171), DI_TEXT_ALIGN_LEFT);

		//Grenade
		DrawString(mBigFont, FormatNumber(GetAmount("GrenadePickup")), (138, 185), DI_TEXT_ALIGN_LEFT);

		//Keys
		String image;
		if (GetAmount("BoABlueKey")) { DrawImage("STKEYS0", (254, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAGreenKey")) { DrawImage("STKEYS3", (260, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAYellowKey")) { DrawImage("STKEYS1", (254, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAPurpleKey")) { DrawImage("STKEYS4", (260, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("BoARedKey")) { DrawImage("STKEYS2", (254, 189), DI_ITEM_OFFSETS); }
		if (GetAmount("BoACyanKey")) { DrawImage("STKEYS5", (260, 189), DI_ITEM_OFFSETS); }

		if (GetAmount("AstroBlueKey")) { DrawImage("ATKEYS0", (254, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroYellowKey")) { DrawImage("ATKEYS1", (254, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroRedKey")) { DrawImage("ATKEYS2", (254, 189), DI_ITEM_OFFSETS); }

		if (GetAmount("CKBlueKey")) { DrawImage("CKKEYS1", (254, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("CKYellowKey")) { DrawImage("CKKEYS0", (254, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("CKRedKey")) { DrawImage("CKKEYS2", (254, 189), DI_ITEM_OFFSETS); }

		//Ammo
		DrawString(mHUDFont, FormatNumber(GetAmount("9mmAmmo"), 3), (284, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("9mmAmmo"), 3), (284, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("12GaugeAmmo"), 3), (284, 178), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("MauserAmmo"), 3), (284, 184), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("FlameAmmo"), 3), (284, 190), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("NebAmmo"), 3), (307, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("PanzerAmmo"), 3), (307, 178), DI_TEXT_ALIGN_RIGHT);

		if (CPlayer.mo.InvSel != null && !level.NoInventoryBar)
		{
			DrawInventorySelection(94, 184, 28);
		}
		else
		{
			DrawMugShot((76, 168));
		}

		DrawImage("HUDBROVL", (74, 168), DI_ITEM_OFFSETS);
	}

	void DrawInventorySelection(int x, int y, int size = 32)
	{
		Vector2 texsize = TexMan.GetScaledSize(CPlayer.mo.InvSel.Icon);
		if (texsize.x > size || texsize.y > size)
		{
			if (texsize.y > texsize.x)
			{
				texsize.y = size * 1.0 / texsize.y;
				texsize.x = texsize.y;
			}
			else
			{
				texsize.x = size * 1.0 / texsize.x;
				texsize.y = texsize.x;
			}
		}
		else { texsize = (1.0, 1.0); }

		DrawInventoryIcon(CPlayer.mo.InvSel, (x, y), DI_ITEM_CENTER, scale:texsize);
		if (CPlayer.mo.InvSel.Amount > 1)
		{
			DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount), (x + size / 2 - 2, y + size / 2 - 2 - mHUDFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
		}
	}

	protected void DrawFullScreenStuff ()
	{
		int current, max;

		DrawVisibilityBar();

		//Minesweeper & Lantern
		if (CheckInventory("MineSweeper", 1))
		{
			current = mBatteryInterpolator.GetValue();
			max = GetMaxAmount("Power");

			MineSweeper ms = MineSweeper(CPlayer.mo.FindInventory("MineSweeper"));

			if (ms && ms.active)

			{
				DrawImage("SWEP_BAK", (0, -28), DI_SCREEN_CENTER_BOTTOM);
				DrawBar("SWEP_ON", "SWEP_OFF", current, max, (0, -28), 0, SHADER_HORZ, DI_SCREEN_CENTER_BOTTOM);
			}
		}

		if (CheckInventory("LanternPickup", 1))
		{
			current = mOilInterpolator.GetValue();
			max = GetMaxAmount("LanternOil");

			LanternPickup l = LanternPickup(CPlayer.mo.FindInventory("LanternPickup"));

			if (l && l.active)
			{
				//DrawImage("LANT_BAK", (-11, -144), DI_SCREEN_CENTER | DI_SCREEN_TOP);
				//DrawBar("LANT_ON", "LANT_OFF", current, max, (-11, -144), 0, SHADER_VERT | SHADER_REVERSE, DI_SCREEN_CENTER | DI_SCREEN_TOP);
				
				//remove - comment following lines and set above if you don't want indicator on bottom zone in fullscreen - ozy81
				DrawImage("LANT_BAK", (0, -28), DI_SCREEN_CENTER_BOTTOM);
				DrawBar("LANT_ON", "LANT_OFF", current, max, (0, -28), 0, SHADER_VERT | SHADER_REVERSE, DI_SCREEN_CENTER_BOTTOM);
			}
		}

		//AirControl & Stamina
		DrawBar("VERTAIRF", "VERTAIRE", mAirInterpolator.GetValue(), level.airsupply, (4, -174), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_OFFSETS);
		DrawBar("VERTSTMF", "VERTSTME", mStaminaInterpolator.GetValue(), 100, (-10, -174), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_OFFSETS);

		//Top Left
		DrawImage("HUD_UL", (0, 0), DI_ITEM_OFFSETS);
		//Money
		DrawString(mBigFont, FormatNumber(GetAmount("CoinItem")), (60, 7), DI_TEXT_ALIGN_RIGHT);
		//Time
		String time = level.TimeFormatted();

		if (hour || minute || second)
		{
			time = FormatNumber(int(hour), 2, 2, FNF_FILLZEROS) .. ":" .. FormatNumber(int(minute), 2, 2, FNF_FILLZEROS) .. ":" .. FormatNumber(int(second), 2, 2, FNF_FILLZEROS);
		}

		DrawString(mHUDFont, time, (20, 21), DI_TEXT_ALIGN_LEFT);

		//Top Right
		DrawImage("HUD_UR", (-66, 0), DI_ITEM_OFFSETS);
		//Keys
		String image;
		if (GetAmount("BoABlueKey")) { DrawImage("STKEYS0", (-14, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAGreenKey")) { DrawImage("STKEYS3", (-14, 19), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAYellowKey")) { DrawImage("STKEYS1", (-24, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAPurpleKey")) { DrawImage("STKEYS4", (-24, 19), DI_ITEM_OFFSETS); }
		if (GetAmount("BoARedKey")) { DrawImage("STKEYS2", (-34, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("BoACyanKey")) { DrawImage("STKEYS5", (-34, 19), DI_ITEM_OFFSETS); }

		if (GetAmount("AstroBlueKey")) { DrawImage("ATKEYS0", (-14, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroYellowKey")) { DrawImage("ATKEYS1", (-24, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroRedKey")) { DrawImage("ATKEYS2", (-34, 9), DI_ITEM_OFFSETS); }

		if (GetAmount("CKBlueKey")) { DrawImage("CKKEYS1", (-14, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("CKYellowKey")) { DrawImage("CKKEYS0", (-24, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("CKRedKey")) { DrawImage("CKKEYS2", (-34, 9), DI_ITEM_OFFSETS); }

		//Bottom Left
		DrawImage("HUD_BL", (0, -53), DI_ITEM_OFFSETS);
		//Health
		DrawString(mBigFont, FormatNumber(CPlayer.health, 3), (94, -36), DI_TEXT_ALIGN_RIGHT);
		DrawString(mBigFont, "%", (107, -36), DI_TEXT_ALIGN_RIGHT);

		//Armor
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		if (armor != null && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (44, -20), DI_ITEM_OFFSETS);
			DrawString(mBigFont, FormatNumber(GetArmorAmount(), 3), (94, -20), DI_TEXT_ALIGN_RIGHT);
			DrawString(mBigFont, "%", (107, -20), DI_TEXT_ALIGN_RIGHT);
		}

		//Mugshot + Inventory
		if (CPlayer.mo.InvSel != null && !level.NoInventoryBar)
		{
			DrawInventorySelection(128, -22, 32);
		}

		DrawMugShot((7, -38));

		//Bottom Right
		DrawImage("HUD_BR", (-116, -53), DI_ITEM_OFFSETS);
		//Weapon
		DrawString(mHUDFont, GetWeaponTag(), (-55, -52), DI_TEXT_ALIGN_CENTER);

		//Ammo
		Ammo ammo1, ammo2;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		if (ammo1) { DrawString(mBigFont, FormatNumber(ammocount1, 3), (-10, -20), DI_TEXT_ALIGN_RIGHT); }
		if (ammo2) { DrawString(mBigFont, FormatNumber(ammocount2, 3), (-10, -36), DI_TEXT_ALIGN_RIGHT); }

		//Ammo Icons
		DrawInventoryIcon(ammo1, (-61, -21), DI_ITEM_OFFSETS);
		DrawInventoryIcon(ammo2, (-61, -37), DI_ITEM_OFFSETS);

		//Grenade
		DrawString(mBigFont, FormatNumber(GetAmount("GrenadePickup")), (-83, -20), DI_TEXT_ALIGN_LEFT);
	}

	void DrawDayNightState()
	{
		double ACStime = GetGlobalACSValue(60) / 65536.0;

		double secduration = 1.0 / (24 * 60 * 60);

		if (ACStime == 0)
		{
			hour = 17;
			minute = 15;
			second = 0;
		}
		else
		{
			second = ACStime / secduration;
			minute = second / 60 + 15;	// Offset these by 15 and 17 to have a start time that's not midnight (aiming for 1715 sunset, 0715 sunrise)
			hour = minute / 60 + 17; 	// 

			second %= 60;
			minute %= 60;
			hour %= 24;
		}

		// TODO - Handle drawing day/night hud indicator here...  Using these values for the time indicator is already handled in the time drawing code.
	}

	//Custom version of DrawBar that allows drawing with alpha - mostly copy/paste from original function, modified to allow alpha and scaling
	void DrawBarAlpha(String ongfx, String offgfx, double curval, double maxval, Vector2 position, int border, int vertical, int flags = 0, double alpha = 1., double scale = 1.)
	{
		let ontex = TexMan.CheckForTexture(ongfx, TexMan.TYPE_MiscPatch);
		if (!ontex.IsValid()) return;
		let offtex = TexMan.CheckForTexture(offgfx, TexMan.TYPE_MiscPatch);

		Vector2 texsize = TexMan.GetScaledSize(ontex);
		texsize.x *= scale;
		texsize.y *= scale;
		[position, flags] = AdjustPosition(position, flags, texsize.X, texsize.Y);

		double value = (maxval != 0) ? clamp(curval / maxval, 0, 1) : 0;
		if(border != 0) value = 1. - value; //invert since the new drawing method requires drawing the bg on the fg.

		// {cx, cb, cr, cy}
		double Clip[4];
		Clip[0] = Clip[1] = Clip[2] = Clip[3] = 0;

		bool horizontal = !(vertical & SHADER_VERT);
		bool reverse = !!(vertical & SHADER_REVERSE);
		double sizeOfImage = (horizontal ? texsize.X - border*2 : texsize.Y - border*2);
		Clip[(!horizontal) | ((!reverse)<<1)] = sizeOfImage - sizeOfImage * value;

		// preserve the active clipping rectangle
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = screen.GetClipRect();

		if(border != 0)
		{
			for(int i = 0; i < 4; i++) Clip[i] += border;

			//Draw the whole foreground
			DrawTexture(ontex, position, flags | DI_ITEM_LEFT_TOP, alpha, scale: (scale, scale));
			SetClipRect(position.X + Clip[0], position.Y + Clip[1], texsize.X - Clip[0] - Clip[2], texsize.Y - Clip[1] - Clip[3], flags);
		}

		if (offtex.IsValid()) { DrawTexture(offtex, position, flags | DI_ITEM_LEFT_TOP, alpha, scale: (scale, scale)); }

		if (border == 0)
		{
			SetClipRect(position.X + Clip[0], position.Y + Clip[1], texsize.X - Clip[0] - Clip[2], texsize.Y - Clip[1] - Clip[3], flags);
			DrawTexture(ontex, position, flags | DI_ITEM_LEFT_TOP, alpha, scale: (scale, scale));
		}
		// restore the previous clipping rectangle
		screen.SetClipRect(cx, cy, cw, ch);
	}

	bool LivingSneakableActors()
	{
		if (level.time < 5 || level.time % 35 == 0) // Cut down on how often this is run
		{
			ThinkerIterator it = ThinkerIterator.Create("StealthBase", Thinker.STAT_DEFAULT - 2); // Just iterate over the sneakable eyes - faster than all Nazi actors
			StealthBase mo;
			while (mo = StealthBase(it.Next()))
			{
				stealth = true;
				return true;
			}

			stealth = false;
			return false;
		}

		return stealth; // Set up like this so it basically returns last known value if it's not time to re-poll
	}

	void DrawMugShot(Vector2 position)
	{
		if (
			CheckWeaponSelected("Panzerschreck") ||
			CheckWeaponSelected("NullWeapon") ||
			CheckWeaponSelected("FakeID") ||
			CheckWeaponSelected("KnifeSilent") ||
			CheckWeaponSelected("Shovel") ||
			CheckWeaponSelected("Firebrand") ||
			CheckWeaponSelected("Luger9mm") ||
			CheckWeaponSelected("TrenchShotgun") ||
			CheckWeaponSelected("Browning5") ||
			CheckWeaponSelected("G43") ||
			CheckWeaponSelected("Kar98k")
		)
		{
			DrawTexture(GetMugShot(5, mugshot.DISABLERAMPAGE), position, DI_ITEM_OFFSETS);
		}
		else
		{
			DrawTexture(GetMugShot(5), position, DI_ITEM_OFFSETS);
		}
	}

	void DrawVisibilityBar(Vector2 position = (0, 0), int flags = DI_SCREEN_HCENTER | DI_SCREEN_BOTTOM, double scale = 1.)
	{
		if (CPlayer.mo.FindInventory("BoAVisibility"))
		{
			int current, max;

			double x = position.x;
			double y = position.y;

			if (LivingSneakableActors())
			{
				if (basealpha < 1) { basealpha += 0.05; }

				if (barstate == HUD_StatusBar) { DrawImage("VIS_BKG", (x - 4 * scale, y - 12 * scale), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (2 * scale, 2 * scale)); }

				// Scale visibility to show more useful granularity
				current = Clamp(mVisibilityInterpolator.GetValue() - 50, 0, 50);
				max = 50;

				if (alertedcount)
				{
					if (barstate == HUD_Fullscreen)
					{
						DrawImage("EYE", (x + 112 * scale, y - 21 * scale), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (0.5 * scale, 0.5 * scale));
						DrawString(mHUDFont, FormatNumber(alertedcount), (x + 124 * scale, y - 20 * scale - 2), flags | DI_TEXT_ALIGN_RIGHT, Font.CR_GRAY);
					}
					else
					{
						DrawImage("EYE", (310, 190), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (0.25, 0.25));
						DrawString(mHUDFont, FormatNumber(alertedcount), (318, 190), flags | DI_TEXT_ALIGN_RIGHT, Font.CR_GRAY);
					}
				}

				int suspicion = mSuspicionInterpolator.GetValue();

				current = max(current, suspicion - 50);

				DrawBarAlpha("VIS_BLK", barstate == HUD_StatusBar ? "VIS_BAC2" : "VIS_BACK", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, basealpha, scale);

				let disguise = CPlayer.mo.FindInventory("DisguiseToken", True);

				// If the player has an active disguise, a stealth weapon selected, and NoTarget enabled, grey out the visibility bar and show the disguise icon
				if (disguise && NaziWeapon(CPlayer.ReadyWeapon) && NaziWeapon(CPlayer.ReadyWeapon).allowdisguised && CPlayer.cheats & CF_NOTARGET)
				{
					DrawBarAlpha("VIS_RED", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, suspicion / 100., scale);

					if (barstate == HUD_Fullscreen)
					{
						String disguisetag;
						disguisetag = disguise.GetTag();
						if (disguisetag != "") { disguisetag = " - " .. disguisetag; }

						DrawInventoryIcon(disguise, (x - 104 * scale, y - 20 * scale), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (scale, scale));
						DrawString(mHUDFont, StringTable.Localize("$DISGUISED") .. disguisetag, (x, y - 20 * scale - 4), flags | DI_TEXT_ALIGN_CENTER, Font.CR_GRAY, basealpha - (suspicion / 100.));
					}
					else
					{
						DrawInventoryIcon(disguise, (240, 184), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (0.75, 0.75));
						DrawString(mHUDFont, StringTable.Localize("$DISGUISED"), (190, 159), DI_TEXT_ALIGN_CENTER, Font.CR_GRAY, basealpha - (suspicion / 100.));
					}
				}
				else
				{
					DrawBarAlpha("VIS_GRN", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, basealpha, scale);
					DrawBarAlpha("VIS_YEL", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, current / (max * .8), scale);
					DrawBarAlpha("VIS_RED", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, current / double(max), scale);
				}
			}
			else
			{
				current = mVisibilityInterpolator.GetValue();
				max = 100;

				if (basealpha > 0) { basealpha -= 0.05; }
				DrawBarAlpha("VIS_BLK", "VIS_BACK", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, basealpha, scale);
			}
		}
	}

	void DrawHealthBars()
	{
		if (screenblocks > 11) { return; }

		Actor mo;

		if (BoAPlayer(CPlayer.mo))
		{
			mo = BoAPlayer(CPlayer.mo).CrosshairTarget;

			if (mo) { while (mo.master) { mo = mo.master; } } // Use the actor's master if it has one

			if (!mo || mo && (!mo.bShootable || mo.health <= 0 || !mo.bBoss)) { mo = BoAPlayer(CPlayer.mo).ForcedHealthBar; } // Fall back to the "force-drawn" one, if there is one
		}

		if (mo && mo.bShootable && mo.health > 0 && (mo.bBoss || (Base(mo) && Base(mo).user_DrawHealthBar)))
		{
			LastTag = mo.GetTag();
			LastHealth = mo.health;
			LastMaxHealth = mo.default.health;
			if (Base(mo)) { LastIcon = Base(mo).BossIcon; }
			else { LastIcon = ""; }

			if (healthbaralpha < 1) { healthbaralpha += 0.2; }
		}
		else
		{
			if (mo && mo.health <= 0) { LastHealth = 0; }
			if (healthbaralpha > 0) { healthbaralpha -= 0.2; }
		}

		if (healthbaralpha > 0) { DrawHealthBar(LastTag, LastHealth, LastMaxHealth, LastIcon); }
	}

	void DrawHealthBar(String tag, int health, int maxhealth, String icon = "")
	{
		int flags = DI_SCREEN_TOP | DI_SCREEN_HCENTER;
		int basey = 36;

		DrawBarAlpha("HEALTHMX", "HEALTH00", health, maxhealth, (0, basey), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, 1.0 * healthbaralpha);
		DrawBarAlpha("HEALTH_Y", "", health, maxhealth, (0, basey), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, ((maxhealth - health) / (maxhealth * 0.25)) * healthbaralpha);
		DrawBarAlpha("HEALTH_R", "", health, maxhealth, (0, basey), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, ((maxhealth - health) / (maxhealth * 0.75)) * healthbaralpha);
		DrawImage(icon, (-70, basey), flags | DI_ITEM_CENTER, healthbaralpha, (-1, -1), (0.5, 0.5));

		DrawString(mSmallFont, tag, (4, (basey + 1) - mSmallFont.mFont.GetHeight() / 2), flags | DI_TEXT_ALIGN_CENTER, Font.CR_GRAY, healthbaralpha * 0.75);
	}

	void DrawCrosshairHint()
	{
		int crosshair = 0;
		String crosshairstring;
		color clr = 0xFF8800; // Default color is orange.
		TextureID CrosshairImage;
		double size = 1.0;
		Vector2 dimensions;
		double w, h;

		if (BoAPlayer(CPlayer.mo))
		{
			// Try to retrieve the values from the player
			crosshair = BoAPlayer(CPlayer.mo).crosshair;
			crosshairstring = BoAPlayer(CPlayer.mo).crosshairstring;
		}

		// Don't continue if there's no crosshair, we're in titlemap, or the player is dead
		if (
			(!crosshair && !crosshairstring) || 
			CPlayer.cheats & CF_CHASECAM ||
			gamestate == GS_TITLELEVEL || 
			CPlayer.health <= 0
		) { return; }

		if (crosshair) // Integer values take precedence over class names (mostly for setting status via ACS)
		{
			if (crosshair >= 80 && crosshair <= 90)
			{
				clr = 0xDEDEDE;  // If it's a status indicator, make it white/grey
			}
			else
			{
				clr = 0x00FF00; // Otherwise make it green (as if the item is in inventory)
			}

			CrosshairImage = TexMan.CheckForTexture("XHAIR" .. crosshair, TexMan.Type_Any);

			dimensions = TexMan.GetScaledSize(CrosshairImage);

			// Force everything to 64 pixels at widest dimension
			if (dimensions.x > dimensions.y)
			{
				dimensions.y *= 64 / dimensions.x;
				dimensions.x = 64;
			}
			else
			{
				dimensions.x *= 64 / dimensions.y;
				dimensions.y = 64;
			}
		}

		if (!CrosshairImage && crosshairstring)
		{
			Class<Inventory> item = crosshairstring;

			if (item) // If it's a valid inventory item, use the inventory actor class's info
			{ 
				let def = GetDefaultByType(item);

				if (def)
				{
					TextureID icon = def.Icon; // First, try to use the Inventory item's icon as the crosshair

					if (icon)
					{
						dimensions = TexMan.GetScaledSize(icon);

						if (dimensions.x >= 32 || dimensions.y >= 32) // But only if it's big enough
						{
							CrosshairImage = icon;
						} 
					}

					if (!CrosshairImage) // If it wasn't big enough, use the spawn state sprite
					{
						CrosshairImage = def.SpawnState.GetSpriteTexture(0);
						dimensions = TexMan.GetScaledSize(CrosshairImage);
					}

					if (CPlayer.mo.FindInventory(crosshairstring))
					{
						clr = 0x00FF00; // Make the icon green if the item is in inventory
					}
					else
					{
						// Pulse the size of icon if you don't have it
						size = (crosshair < 80 || (crosshair > 90 && crosshair < 98)) ? 1.0 + 0.1 * sin(level.time * 15 % 360) : 1.0;
					}

					// Force everything to 52 pixels at widest dimension
					if (dimensions.x > dimensions.y)
					{
						dimensions.y *= 52 / dimensions.x;
						dimensions.x = 52;
					}
					else
					{
						dimensions.x *= 52 / dimensions.y;
						dimensions.y = 52;
					}
				}
			}
			else // Fall back to trying to use the string value as an image name
			{
				TextureID icon = TexMan.CheckForTexture(crosshairstring, TexMan.Type_Any);

				if (icon)
				{
					dimensions = TexMan.GetScaledSize(icon);

					CrosshairImage = icon;
					clr = 0x00FF00; // Make the icon green as if the item is in inventory

					// Force everything to 52 pixels at widest dimension
					if (dimensions.x > dimensions.y)
					{
						dimensions.y *= 52 / dimensions.x;
						dimensions.x = 52;
					}
					else
					{
						dimensions.x *= 52 / dimensions.y;
						dimensions.y = 52;
					}
				}
			}
		}

		if (!CrosshairImage) { return; }

		// Handle the scaling size multiplier here
		dimensions *= size;

		// Draw centered on screen, with offsets forced to center of the icon
		screen.DrawTexture (CrosshairImage, false, screen.GetWidth() / 2, screen.GetHeight() / 2, DTA_DestWidthF, dimensions.x, DTA_DestHeightF, dimensions.y, DTA_AlphaChannel, true, DTA_FillColor, clr & 0xFFFFFF, DTA_CenterOffset, true);
	}

	void DrawTankStatusBar()
	{
		Vector2 dimensions;

		let tankplayer = ShermanPlayer(CPlayer.mo);

		Vector3 hitlocation = tankplayer.CrosshairPos;
		let targetactor = tankplayer.CrosshairActor;

		Vector3 worldpos = CPlayer.camera.pos + level.Vec3Diff(CPlayer.camera.pos, hitlocation); // World position of object, offset from viewpoint
		Vector3 screenpos = BoACoordUtil.WorldToScreen(worldpos, CPlayer.camera.pos, CPlayer.camera.pitch, CPlayer.camera.angle, CPlayer.camera.roll, CPlayer.fov); // Translate that to the screen, using the viewpoint's info

		if (screenpos.z <= 1 && screenpos.z >= -1) // If the coordinates are off the screen somehow, then skip drawing
		{
			Vector2 drawpos = BoACoordUtil.ToViewport(screenpos);

			TextureID image = TexMan.CheckForTexture("XHAIRB2", TexMan.Type_MiscPatch);

			dimensions = TexMan.GetScaledSize(image);
			double scaleamt = clamp(tankplayer.CrosshairDist / 680 * CPlayer.fov / 90, 0.5, 1.5); // Scale with fov to account for zooming
	
			dimensions /= scaleamt;

			color cclr = 0xDDDDDD; // Light grey by default

			if (targetactor && targetactor.bShootable && targetactor != CPlayer.mo && (!targetactor.master || targetactor.master != CPlayer.mo))
			{
				if (targetactor.bIsMonster && CPlayer.mo.isFriend(targetactor)) { cclr = 0x00CD00; } // Green for allies
				else if (targetactor.bIsMonster)
				{
					cclr = 0xCD0000; // Red for enemies
					dimensions *= 1 + (sin(level.time * 25) + 1.0) / 2;
				} 
				else if (!targetactor.bNoDamage && !targetactor.bInvulnerable)
				{
					cclr = 0xCDCD00; // Yellow for other shootables
					dimensions *= 1 + 0.5 * (sin(level.time * 25) + 1.0) / 2;
				} 
			}

			screen.DrawTexture(image, false, drawpos.x, drawpos.y, DTA_DestWidthF, dimensions.x, DTA_DestHeightF, dimensions.y, DTA_AlphaChannel, true, DTA_FillColor, cclr & 0xFFFFFF);

			// Small cross in the center is dark for visibility
			TextureID image2 = TexMan.CheckForTexture("XHAIRB7", TexMan.Type_MiscPatch); 
			dimensions = TexMan.GetScaledSize(image2);
			dimensions /= scaleamt;

			screen.DrawTexture(image2, false, drawpos.x, drawpos.y, DTA_DestWidthF, dimensions.x, DTA_DestHeightF, dimensions.y, DTA_AlphaChannel, true, DTA_FillColor, 0x222222 & 0xFFFFFF);
		}

		BeginHUD(1, False);

		if (!(CPlayer.cheats & CF_CHASECAM))
		{
			TextureID image = TexMan.CheckForTexture("TANKVIEW", TexMan.Type_MiscPatch);
			screen.DrawTexture(image, false, 0, 0, DTA_Fullscreen, true, DTA_KeepRatio, true);
		}

		Vector2 hudscale = GetHUDScale();
		double ratio = Screen.GetAspectRatio();

		double sheight = Screen.GetHeight() / hudscale.y;
		double swidth = Screen.GetWidth() / hudscale.x;

		Color tankclr = GetHealthColor(0.5);
		Color glowclr = GetHealthColor(0.95);

		double healthpercent = CPlayer.health * 100. / CPlayer.mo.Default.health;
		String healthstring = int(healthpercent) .. "%";

		double pulse = healthpercent < 25 ? (sin(level.time * (26 - healthpercent)) + 1.0) / 2 : 0.5; // Start blinking at less than 25% health, faster as health decreases

		TextureID back = TexMan.CheckForTexture("TANKBACK", TexMan.Type_Any);
		dimensions = TexMan.GetScaledSize(back) / 4;

		double x = dimensions.x / 2 + 4;
		double y = sheight - dimensions.y / 2 - 4;

		screen.DrawTexture(back, false, x, y, DTA_DestWidthF, dimensions.x, DTA_DestHeightF, dimensions.y, DTA_CenterOffset, true, DTA_Alpha, 0.85, DTA_VirtualWidth, int(swidth), DTA_VirtualHeight, int(sheight), DTA_KeepRatio, true);

		TextureID tank = TexMan.CheckForTexture("TANKSTAT", TexMan.Type_Any);
		TextureID glow = TexMan.CheckForTexture("TANKGLOW", TexMan.Type_Any);
		dimensions = TexMan.GetScaledSize(tank) / 4;

		x = dimensions.x / 2 + 16;
		y = sheight - dimensions.y / 2 - 24;

		screen.DrawTexture(tank, false, x, y, DTA_DestWidthF, dimensions.x, DTA_DestHeightF, dimensions.y, DTA_FillColor, tankclr & 0xFFFFFF, DTA_CenterOffset, true, DTA_Alpha, 0.85, DTA_VirtualWidth, int(swidth), DTA_VirtualHeight, int(sheight), DTA_KeepRatio, true);
		screen.DrawTexture(glow, false, x, y, DTA_DestWidthF, dimensions.x, DTA_DestHeightF, dimensions.y, DTA_FillColor, glowclr & 0xFFFFFF, DTA_CenterOffset, true, DTA_Alpha, pulse, DTA_VirtualWidth, int(swidth), DTA_VirtualHeight, int(sheight), DTA_KeepRatio, true);

		x = dimensions.x / 2 + 16 - mBigFont.mFont.StringWidth(healthstring) / 2;
		y = sheight - mBigFont.mFont.GetHeight() / 2 - 16;

		screen.DrawText(mBigFont.mFont, Font.CR_GRAY, x, y, healthstring, DTA_Alpha, 0.8, DTA_VirtualWidth, int(swidth), DTA_VirtualHeight, int(sheight), DTA_KeepRatio, true);

		if (CPlayer.mo.InvSel != null && !level.NoInventoryBar)
		{
			Vector2 texsize = TexMan.GetScaledSize(CPlayer.mo.InvSel.Icon);
			if (texsize.x > 32 || texsize.y > 32)
			{
				if (texsize.y > texsize.x)
				{
					texsize.y = 32.0 / texsize.y;
					texsize.x = texsize.y;
				}
				else
				{
					texsize.x = 32.0 / texsize.x;
					texsize.y = texsize.x;
				}
			}
			else { texsize = (1.0, 1.0); }

			Vector2 drawpos = (64, -38);

			DrawInventoryIcon(CPlayer.mo.InvSel, drawpos, DI_ITEM_OFFSETS, 1.0);
			if (CPlayer.mo.InvSel.Amount > 1)
			{
				DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount), (drawpos.x + 31, drawpos.y + 30 - mHUDFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
			}
		}
	}

	int GetHealthColor(double shade = 1.0)
	{
		color clr;
		int red, green, blue;
		int health = int(CPlayer.health * 100. / CPlayer.mo.Default.health);

		if (CPlayer.cheats & CF_GODMODE || CPlayer.cheats & CF_GODMODE2)
		{ // Gold for god mode...
			red = 255;
			green = 255;
			blue = 64;
		} 
		else
		{
			health = clamp(health, 0, 100);

			if (health < 50)
			{
				red = 255;
				green = health * 255 / 50;
			}
			else
			{
				red = (100 - health) * 255 / 50;
				green = 255;
			}
		}

		clr = (int(red * shade) << 16) | (int(green * shade) << 8) | int(blue * shade);

		return clr;
	}
}