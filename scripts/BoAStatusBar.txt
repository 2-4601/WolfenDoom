class BoAStatusBar : BaseStatusBar
{
	HUDFont mBigFont;
	HUDFont mSmallFont;
	HUDFont mHUDFont;
	InventoryBarState diparms;
	DynamicValueInterpolator mAirInterpolator;
	DynamicValueInterpolator mStaminaInterpolator;
	DynamicValueInterpolator mBatteryInterpolator;
	DynamicValueInterpolator mSpaceSuitInterpolator;
	DynamicValueInterpolator mVisibilityInterpolator;
	DynamicValueInterpolator mSuspicionInterpolator;

	double basealpha;
	int alertedcount;
	int barstate;
	bool stealth;
	double healthbaralpha;
	String LastTag;
	int LastHealth;
	int LastMaxHealth;
	String LastIcon;
	double velocity, oldangle, oldpitch;

	override void Init()
	{
		Super.Init();
		SetSize(32, 320, 200);
		CompleteBorder = True;

		// Create the fonts used
		mBigFont = HUDFont.Create("BIGFONT", 0);
		mSmallFont = HUDFont.Create("SMALLFONT", 2);
		mHUDFont = HUDFont.Create("THREEFIV", 1);

		diparms = InventoryBarState.Create();

		mAirInterpolator = DynamicValueInterpolator.Create(0, 1.25, 1, 40);
		mStaminaInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mBatteryInterpolator = DynamicValueInterpolator.Create(0, 1.25, 1, 40);
		mSpaceSuitInterpolator = DynamicValueInterpolator.Create(0, 1.25, 1, 40);
		mVisibilityInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		mSuspicionInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
	}

	override void NewGame ()
	{
		Super.NewGame();

		mAirInterpolator.Reset(0);
		mStaminaInterpolator.Reset(0);
		mBatteryInterpolator.Reset(0);
		mSpaceSuitInterpolator.Reset(0);
		mVisibilityInterpolator.Reset(0);
		mSuspicionInterpolator.Reset(0);
	}

	override void Tick()
	{
		Super.Tick();

		mAirInterpolator.Update(GetAirTime());
		mStaminaInterpolator.Update(GetAmount("Stamina")); // This is a custom inventory item, not CPlayer.mo.stamina!

		if (CheckInventory("MineSweeper", 1)) { mBatteryInterpolator.Update(GetAmount("Power")); }
		if (CheckInventory("PowerSpaceSuit", 1)) { mSpaceSuitInterpolator.Update(CPlayer.mo.GetEffectTicsForItem("SpaceSuit")); }

		if (BoAPlayer(CPlayer.mo))
		{
			mVisibilityInterpolator.Update(BoAPlayer(CPlayer.mo).user_visibility);

			alertedcount = CallACS("GetAlertedCount");

			if (alertedcount)
			{
				mSuspicionInterpolator.Update(100);  // Force the suspicion level to 100% if sneakable enemies are alerted
			}
			else  // Otherwise use actual suspicion level
			{
				mSuspicionInterpolator.Update(BoAPlayer(CPlayer.mo).suspicion);
			}
		}
	}

	override void Draw (int state, double TicFrac)
	{
		if (CPlayer.mo.FindInventory("DreamState"))
		{
			TextureID tex = TexMan.CheckForTexture("DREAMING", TexMan.Type_MiscPatch);
			if (tex.IsValid()) {
				double ratio = screen.GetAspectRatio();

				// Calculate width and height to keep the image at the same relative size, regardless of aspect ratio
				double width = ratio < 1.25 ? 200 * ratio : 320;
				double height = ratio > 1.25 ? 320 / ratio : 200;

				double targetvelocity = CPlayer.mo.vel.x * CPlayer.mo.vel.x + CPlayer.mo.vel.y * CPlayer.mo.vel.y + CPlayer.mo.vel.z * CPlayer.mo.vel.z + abs(oldangle - CPlayer.mo.angle) * 20 + abs(oldpitch - CPlayer.mo.pitch) * 20;

				if (velocity < targetvelocity) { velocity = velocity < 35 ? velocity + 1 : velocity; }
				else { velocity -= 1; }

				if (velocity < 0) { velocity = 0; }

				double alpha = min(sin(velocity), 0.25);

				double x = 0;
				double y = CPlayer.mo.pitch / 5;

				screen.DrawTexture(tex, false, (width / 2) + x, (height / 2) + y, DTA_Clean, true, DTA_CenterOffset, true, DTA_KeepRatio, true, DTA_VirtualWidthF, width, DTA_VirtualHeightF, height, DTA_Alpha, alpha);

				x = cos(level.time % 360) * 8;
				y += sin(level.time % 360) * 8;

				screen.DrawTexture(tex, false, (width / 2) + x, (height / 2) + y, DTA_Clean, true, DTA_CenterOffset, true, DTA_KeepRatio, true, DTA_VirtualWidthF, width, DTA_VirtualHeightF, height, DTA_Alpha, alpha / 2);
				screen.DrawTexture(tex, false, (width / 2) - x, (height / 2) - y, DTA_Clean, true, DTA_CenterOffset, true, DTA_KeepRatio, true, DTA_VirtualWidthF, width, DTA_VirtualHeightF, height, DTA_Alpha, alpha / 2);

				Super.Draw (state, TicFrac);
			}

			if (level.time % 35)
			{
				oldangle = CPlayer.mo.angle;
				oldpitch = CPlayer.mo.pitch;
			}
		}


		Super.Draw (state, TicFrac);

		if (CPlayer.mo.FindInventory("CutsceneEnabled")) { return; }

		if (!automapactive)
		{
			// Draw fullscreen overlays, regardless of status bar state
			BeginHUD(1, True);
				DrawHealthBars();

				//Draw Mask for Space Suit
				if (CheckInventory("PowerSpaceSuit", 1))
				{
					DrawImage("STGMASK", (0, 0), DI_SCREEN_CENTER | DI_ITEM_CENTER);

					int current, max;
					[current, max] = CPlayer.mo.GetEffectTicsForItem("SpaceSuit");

					current = mSpaceSuitInterpolator.GetValue();
					DrawBar("HORZSP2F", "HORZSP2E", current, max, (-22, 55), 0, SHADER_HORZ, DI_SCREEN_CENTER | DI_ITEM_OFFSETS);
				}
			BeginHUD(1, False);

			barstate = state;

			if (state == HUD_StatusBar)
			{
				BeginStatusBar(False);
				DrawMainBar(TicFrac);
			}
			else if (state == HUD_Fullscreen)
			{
				BeginHUD(1, False);
				DrawFullScreenStuff ();
			}
		}
		else
		{
			BeginStatusBar();
			DrawImage("AMBAR", (-54, 152), DI_ITEM_OFFSETS);
		}
	}

	protected void DrawMainBar (double TicFrac)
	{
		int current, max;

		DrawImage("HUDBAR", (-54, 152), DI_ITEM_OFFSETS);

		DrawVisibilityBar((85, 162), scale: 0.5);

		if (CheckInventory("MineSweeper", 1))
		{
			int current, max;
			current = mBatteryInterpolator.GetValue();
			max = GetMaxAmount("Power");

			DrawBar("VERTBYMG", "VERTBYMD", current, max, (195, 170), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_OFFSETS);

			if (CheckInventory("MineSweeperActive", 1))
			{
				DrawBar("VERTBYMF", "VERTBYME", current, max, (195, 170), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_OFFSETS);
			}
		}

		//AirControl & Stamina
		DrawBar("HORZAIRF", "HORZAIRE", mAirInterpolator.GetValue(), level.airsupply, (36, 160), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		DrawBar("HORZSTMF", "HORZSTME", mStaminaInterpolator.GetValue(), 100, (88, 160), 0, SHADER_HORZ, DI_ITEM_OFFSETS);

		//Ammo
		Ammo ammo1, ammo2;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		if (ammo1) { DrawString(mBigFont, FormatNumber(ammocount1, 3), (225, 171), DI_TEXT_ALIGN_RIGHT); }
		if (ammo2) { DrawString(mBigFont, FormatNumber(ammocount2, 3), (225, 185), DI_TEXT_ALIGN_RIGHT); }

		//Ammo Icons
		DrawInventoryIcon(ammo1, (231, 170), DI_ITEM_OFFSETS);
		DrawInventoryIcon(ammo2, (231, 184), DI_ITEM_OFFSETS);

		//Weapon
		if (!CheckWeaponSelected("NullWeapon")) { DrawString(mHUDFont, GetWeaponTag(), (190, 159), DI_TEXT_ALIGN_CENTER); }

		//Time
		DrawString(mHUDFont, level.TimeFormatted(), (250, 159));

		//Health
		DrawString(mBigFont, FormatNumber(CPlayer.health, 3), (52, 171), DI_TEXT_ALIGN_RIGHT);
		DrawString(mBigFont, "%", (65, 171), DI_TEXT_ALIGN_RIGHT);

		//Armor
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		if (armor != null && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (4, 184), DI_ITEM_OFFSETS);
			DrawString(mBigFont, FormatNumber(GetArmorAmount(), 3), (52, 185), DI_TEXT_ALIGN_RIGHT);
			DrawString(mBigFont, "%", (65, 185), DI_TEXT_ALIGN_RIGHT);
		}

		//Money
		DrawString(mBigFont, FormatNumber(GetAmount("CoinItem")), (138, 171), DI_TEXT_ALIGN_LEFT);

		//Grenade
		DrawString(mBigFont, FormatNumber(GetAmount("GrenadePickup")), (138, 185), DI_TEXT_ALIGN_LEFT);

		//Keys
		String image;
		if (GetAmount("BoABlueKey")) { DrawImage("STKEYS0", (254, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAGreenKey")) { DrawImage("STKEYS3", (260, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAYellowKey")) { DrawImage("STKEYS1", (254, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAPurpleKey")) { DrawImage("STKEYS4", (260, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("BoARedKey")) { DrawImage("STKEYS2", (254, 189), DI_ITEM_OFFSETS); }
		if (GetAmount("BoACyanKey")) { DrawImage("STKEYS5", (260, 189), DI_ITEM_OFFSETS); }

		if (GetAmount("AstroBlueKey")) { DrawImage("ATKEYS0", (254, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroYellowKey")) { DrawImage("ATKEYS1", (254, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroRedKey")) { DrawImage("ATKEYS2", (254, 189), DI_ITEM_OFFSETS); }

		if (GetAmount("CKBlueKey")) { DrawImage("CKKEYS1", (254, 171), DI_ITEM_OFFSETS); }
		if (GetAmount("CKYellowKey")) { DrawImage("CKKEYS0", (254, 180), DI_ITEM_OFFSETS); }
		if (GetAmount("CKRedKey")) { DrawImage("CKKEYS2", (254, 189), DI_ITEM_OFFSETS); }

		//Ammo
		DrawString(mHUDFont, FormatNumber(GetAmount("9mmAmmo"), 3), (284, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("9mmAmmo"), 3), (284, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("12GaugeAmmo"), 3), (284, 178), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("MauserAmmo"), 3), (284, 184), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("FlameAmmo"), 3), (284, 190), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("NebAmmo"), 3), (307, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mHUDFont, FormatNumber(GetAmount("PanzerAmmo"), 3), (307, 178), DI_TEXT_ALIGN_RIGHT);
		
		if (CPlayer.mo.InvSel != null && !level.NoInventoryBar)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (156, 168), DI_ITEM_OFFSETS);
			if (CPlayer.mo.InvSel.Amount > 1)
			{
				DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount), (156 + 31, 168 + 30 - mHUDFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
			}
		}

		DrawMugShot((76, 168));

		DrawImage("HUDBROVL", (74, 168), DI_ITEM_OFFSETS);
	}

	protected void DrawFullScreenStuff ()
	{
		int current, max;

		DrawVisibilityBar();

		if (CheckInventory("MineSweeper", 1))
		{
			current = mBatteryInterpolator.GetValue();
			max = GetMaxAmount("Power");

			DrawBar("VERTBYMG", "VERTBYMD", current, max, (150, -35), 0, SHADER_VERT, DI_ITEM_OFFSETS);

			if (CheckInventory("MineSweeperActive", 1))
			{
				DrawBar("VERTBYMF", "VERTBYME", current, max, (150, -35), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_OFFSETS);
			}
		}

		//AirControl & Stamina
		DrawBar("VERTAIRF", "VERTAIRE", mAirInterpolator.GetValue(), level.airsupply, (4, -174), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_OFFSETS);
		DrawBar("VERTSTMF", "VERTSTME", mStaminaInterpolator.GetValue(), 100, (-10, -174), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_OFFSETS);

		//Top Left
		DrawImage("HUD_UL", (0, 0), DI_ITEM_OFFSETS);
		//Money
		DrawString(mBigFont, FormatNumber(GetAmount("CoinItem")), (50, 7), DI_TEXT_ALIGN_RIGHT);
		//Time
		DrawString(mHUDFont, level.TimeFormatted(), (15, 21), DI_TEXT_ALIGN_LEFT);

		//Top Right
		DrawImage("HUD_UR", (-66, 0), DI_ITEM_OFFSETS);
		//Keys
		String image;
		if (GetAmount("BoABlueKey")) { DrawImage("STKEYS0", (-14, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAGreenKey")) { DrawImage("STKEYS3", (-14, 19), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAYellowKey")) { DrawImage("STKEYS1", (-24, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("BoAPurpleKey")) { DrawImage("STKEYS4", (-24, 19), DI_ITEM_OFFSETS); }
		if (GetAmount("BoARedKey")) { DrawImage("STKEYS2", (-34, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("BoACyanKey")) { DrawImage("STKEYS5", (-34, 19), DI_ITEM_OFFSETS); }

		if (GetAmount("AstroBlueKey")) { DrawImage("ATKEYS0", (-14, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroYellowKey")) { DrawImage("ATKEYS1", (-24, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("AstroRedKey")) { DrawImage("ATKEYS2", (-34, 9), DI_ITEM_OFFSETS); }

		if (GetAmount("CKBlueKey")) { DrawImage("CKKEYS1", (-14, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("CKYellowKey")) { DrawImage("CKKEYS0", (-24, 9), DI_ITEM_OFFSETS); }
		if (GetAmount("CKRedKey")) { DrawImage("CKKEYS2", (-34, 9), DI_ITEM_OFFSETS); }

		//Bottom Left
		DrawImage("HUD_BL", (0, -53), DI_ITEM_OFFSETS);
		//Health
		DrawString(mBigFont, FormatNumber(CPlayer.health, 3), (94, -36), DI_TEXT_ALIGN_RIGHT);
		DrawString(mBigFont, "%", (107, -36), DI_TEXT_ALIGN_RIGHT);

		//Armor
		let armor = CPlayer.mo.FindInventory("BasicArmor");
		if (armor != null && armor.Amount > 0)
		{
			DrawInventoryIcon(armor, (44, -20), DI_ITEM_OFFSETS);
			DrawString(mBigFont, FormatNumber(GetArmorAmount(), 3), (94, -20), DI_TEXT_ALIGN_RIGHT);
			DrawString(mBigFont, "%", (107, -20), DI_TEXT_ALIGN_RIGHT);
		}

		//Mugshot + Inventory
		if (CPlayer.mo.InvSel != null && !level.NoInventoryBar)
		{
			DrawInventoryIcon(CPlayer.mo.InvSel, (112, -38), DI_ITEM_OFFSETS);
			if (CPlayer.mo.InvSel.Amount > 1)
			{
				DrawString(mHUDFont, FormatNumber(CPlayer.mo.InvSel.Amount), (112 + 31, -38 + 30 - mHUDFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
			}
		}

		DrawMugShot((7, -38));

		//Bottom Right
		DrawImage("HUD_BR", (-116, -53), DI_ITEM_OFFSETS);
		//Weapon
		if (!CheckWeaponSelected("NullWeapon")) { DrawString(mHUDFont, GetWeaponTag(), (-55, -52), DI_TEXT_ALIGN_CENTER); }

		//Ammo
		Ammo ammo1, ammo2;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		if (ammo1) { DrawString(mBigFont, FormatNumber(ammocount1, 3), (-10, -20), DI_TEXT_ALIGN_RIGHT); }
		if (ammo2) { DrawString(mBigFont, FormatNumber(ammocount2, 3), (-10, -36), DI_TEXT_ALIGN_RIGHT); }

		//Ammo Icons
		DrawInventoryIcon(ammo1, (-61, -21), DI_ITEM_OFFSETS);
		DrawInventoryIcon(ammo2, (-61, -37), DI_ITEM_OFFSETS);

		//Grenade
		DrawString(mBigFont, FormatNumber(GetAmount("GrenadePickup")), (-83, -20), DI_TEXT_ALIGN_LEFT);
	}

	//Custom version of DrawBar that allows drawing with alpha - mostly copy/paste from original function, modified to allow alpha and scaling
	void DrawBarAlpha(String ongfx, String offgfx, double curval, double maxval, Vector2 position, int border, int vertical, int flags = 0, double alpha = 1., double scale = 1.)
	{
		let ontex = TexMan.CheckForTexture(ongfx, TexMan.TYPE_MiscPatch);
		if (!ontex.IsValid()) return;
		let offtex = TexMan.CheckForTexture(offgfx, TexMan.TYPE_MiscPatch);

		Vector2 texsize = TexMan.GetScaledSize(ontex);
		texsize.x *= scale;
		texsize.y *= scale;
		[position, flags] = AdjustPosition(position, flags, texsize.X, texsize.Y);
		
		double value = (maxval != 0) ? clamp(curval / maxval, 0, 1) : 0;
		if(border != 0) value = 1. - value; //invert since the new drawing method requires drawing the bg on the fg.
		
		// {cx, cb, cr, cy}
		double Clip[4];
		Clip[0] = Clip[1] = Clip[2] = Clip[3] = 0;
		
		bool horizontal = !(vertical & SHADER_VERT);
		bool reverse = !!(vertical & SHADER_REVERSE);
		double sizeOfImage = (horizontal ? texsize.X - border*2 : texsize.Y - border*2);
		Clip[(!horizontal) | ((!reverse)<<1)] = sizeOfImage - sizeOfImage * value;
		
		// preserve the active clipping rectangle
		int cx, cy, cw, ch;
		[cx, cy, cw, ch] = screen.GetClipRect();

		if(border != 0)
		{
			for(int i = 0; i < 4; i++) Clip[i] += border;

			//Draw the whole foreground
			DrawTexture(ontex, position, flags | DI_ITEM_LEFT_TOP, alpha, scale: (scale, scale));
			SetClipRect(position.X + Clip[0], position.Y + Clip[1], texsize.X - Clip[0] - Clip[2], texsize.Y - Clip[1] - Clip[3], flags);
		}
		
		if (offtex.IsValid()) { DrawTexture(offtex, position, flags | DI_ITEM_LEFT_TOP, alpha, scale: (scale, scale)); }
		
		if (border == 0) 
		{
			SetClipRect(position.X + Clip[0], position.Y + Clip[1], texsize.X - Clip[0] - Clip[2], texsize.Y - Clip[1] - Clip[3], flags);
			DrawTexture(ontex, position, flags | DI_ITEM_LEFT_TOP, alpha, scale: (scale, scale));
		}
		// restore the previous clipping rectangle
		screen.SetClipRect(cx, cy, cw, ch);
	}

	bool LivingSneakableActors()
	{
		if (level.time < 5 || level.time % 35 == 0) // Cut down on how often this is run
		{
			ThinkerIterator it = ThinkerIterator.Create("StealthBase", Thinker.STAT_DEFAULT - 2); // Just iterate over the sneakable eyes - faster than all Nazi actors
			StealthBase mo;
			while (mo = StealthBase(it.Next(true)))
			{
				stealth = true;
				return true;
			}
			
			stealth = false;
			return false;
		}

		return stealth;
	}

	void DrawMugShot(Vector2 position)
	{
		if (
			CheckWeaponSelected("Panzerschreck") ||
			CheckWeaponSelected("NullWeapon") ||
			CheckWeaponSelected("KnifeSilent") ||
			CheckWeaponSelected("Shovel") ||
			CheckWeaponSelected("Firebrand") ||
			CheckWeaponSelected("Luger9mm") ||
			CheckWeaponSelected("TrenchShotgun") ||
			CheckWeaponSelected("Browning5") ||
			CheckWeaponSelected("G43") ||
			CheckWeaponSelected("Kar98k")
		)
		{
			DrawTexture(GetMugShot(5, mugshot.DISABLERAMPAGE), position, DI_ITEM_OFFSETS);
		}
		else
		{
			DrawTexture(GetMugShot(5), position, DI_ITEM_OFFSETS);
		}
	}

	void DrawVisibilityBar(Vector2 position = (0, 0), int flags = DI_SCREEN_HCENTER | DI_SCREEN_BOTTOM, double scale = 1.)
	{
		if (BoAPlayer(CPlayer.mo))
		{
			int current, max;

			double x = position.x;
			double y = position.y;

			if (LivingSneakableActors())
			{
				if (basealpha < 1) { basealpha += 0.05; }

				if (barstate == HUD_StatusBar) { DrawImage("VIS_BKG", (x - 4 * scale, y - 12 * scale), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (2 * scale, 2 * scale)); }

				// Scale visibility to show more useful granularity
				current = Clamp(mVisibilityInterpolator.GetValue() - 50, 0, 50);
				max = 50;

				if (alertedcount)
				{
					if (barstate == HUD_Fullscreen)
					{
						DrawImage("EYE", (x + 112 * scale, y - 21 * scale), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (0.5 * scale, 0.5 * scale));
						DrawString(mHUDFont, FormatNumber(alertedcount), (x + 124 * scale, y - 20 * scale - 2), flags | DI_TEXT_ALIGN_RIGHT, Font.CR_GRAY);
					}
					else
					{
						DrawImage("EYE", (310, 190), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (0.25, 0.25));
						DrawString(mHUDFont, FormatNumber(alertedcount), (318, 190), flags | DI_TEXT_ALIGN_RIGHT, Font.CR_GRAY);
					}
				}

				int suspicion = mSuspicionInterpolator.GetValue();

				current = max(current, suspicion - 50);

				DrawBarAlpha("VIS_BLK", barstate == HUD_StatusBar ? "VIS_BAC2" : "VIS_BACK", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, basealpha, scale);

				let disguise = CPlayer.mo.FindInventory("DisguiseToken", True);

				if (disguise && CheckWeaponSelected("NullWeapon"))
				{
					DrawBarAlpha("VIS_RED", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, suspicion / 100., scale);

					if (barstate == HUD_Fullscreen)
					{
						String disguisetag;
						disguisetag = disguise.GetTag();
						if (disguisetag != "") { disguisetag = " - " .. disguisetag; }

						DrawInventoryIcon(disguise, (x - 104 * scale, y - 20 * scale), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (scale, scale));
						DrawString(mHUDFont, StringTable.Localize("$DISGUISED") .. disguisetag, (x, y - 20 * scale - 4), flags | DI_TEXT_ALIGN_CENTER, Font.CR_GRAY, basealpha - (suspicion / 100.));
					}
					else
					{
						DrawInventoryIcon(disguise, (240, 184), flags | DI_ITEM_CENTER, basealpha, (-1, -1), (0.75, 0.75));
						DrawString(mHUDFont, StringTable.Localize("$DISGUISED"), (190, 159), DI_TEXT_ALIGN_CENTER, Font.CR_GRAY, basealpha - (suspicion / 100.));
					}
				}
				else
				{
					DrawBarAlpha("VIS_GRN", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, basealpha, scale);
					DrawBarAlpha("VIS_YEL", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, current / (max * .8), scale);
					DrawBarAlpha("VIS_RED", "", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, current / double(max), scale);
				}
			}
			else
			{
				current = mVisibilityInterpolator.GetValue();
				max = 100;

				if (basealpha > 0) { basealpha -= 0.05; }
				DrawBarAlpha("VIS_BLK", "VIS_BACK", current, max, (x, y - 20 * scale), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, basealpha, scale);
			}
		}
	}

	void DrawHealthBars()
	{
		if (screenblocks > 11) { return; }

		Actor mo;

		mo = BoAPlayer(CPlayer.mo).CrosshairTarget;
		if (!mo || mo && (!mo.bShootable || mo.health <= 0 || !mo.bBoss)) { mo = BoAPlayer(CPlayer.mo).ForcedHealthBar; } // Fall back to the "force-drawn" one, if there is one

		if (mo && mo.bShootable && mo.health > 0 && (mo.bBoss || (Base(mo) && Base(mo).user_DrawHealthBar)))
		{
			LastTag = mo.GetTag();
			LastHealth = mo.health;
			LastMaxHealth = mo.default.health;
			if (Base(mo)) { LastIcon = Base(mo).BossIcon; }
			else { LastIcon = ""; }

			if (healthbaralpha < 1) { healthbaralpha += 0.2; }
		}
		else
		{
			if (mo && mo.health <= 0) { LastHealth = 0; }
			if (healthbaralpha > 0) { healthbaralpha -= 0.2; }
		}

		if (healthbaralpha > 0) { DrawHealthBar(LastTag, LastHealth, LastMaxHealth, LastIcon); }
	}

	void DrawHealthBar(String tag, int health, int maxhealth, String icon = "")
	{
		int flags = DI_SCREEN_TOP | DI_SCREEN_HCENTER;
		int basey = 36;

		DrawBarAlpha("HEALTHMX", "HEALTH00", health, maxhealth, (0, basey), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, 1.0 * healthbaralpha);
		DrawBarAlpha("HEALTH_Y", "", health, maxhealth, (0, basey), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, ((maxhealth - health) / (maxhealth * 0.25)) * healthbaralpha);
		DrawBarAlpha("HEALTH_R", "", health, maxhealth, (0, basey), 0, SHADER_HORZ, flags | DI_ITEM_CENTER, ((maxhealth - health) / (maxhealth * 0.75)) * healthbaralpha);
		DrawImage(icon, (-70, basey), flags | DI_ITEM_CENTER, healthbaralpha, (-1, -1), (0.5, 0.5));

		DrawString(mSmallFont, tag, (4, (basey + 1) - mSmallFont.mFont.GetHeight() / 2), flags | DI_TEXT_ALIGN_CENTER, Font.CR_GRAY, healthbaralpha * 0.75);
	}
}