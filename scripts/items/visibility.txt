class BoAVisibility : CustomInventory
{
	double extravisibility;
	double visibility;
	int noiselevel;
	int alertedcount;
	double suspicion;
	int timeout;

	Default
	{
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}

	void DoVisibility()
	{
		int lightlevel = Owner.CurSector.lightlevel;

		if (lightlevel + extravisibility > 64)
		{
			double movespeed = Owner.vel.Length() * Owner.vel.Length();
			double viewheightmod = Owner.player.crouchfactor * Owner.height - (Owner.height / 2);

			if (movespeed > 0)
			{
				if (movespeed < viewheightmod) { movespeed = viewheightmod; }
				viewheightmod = 0;
			}

			visibility = Clamp(int(lightlevel * 0.35 + movespeed + noiselevel * 0.9 + extravisibility + viewheightmod - ((3 - skill) * 10)), 0, 100);
		} else { visibility = 0; }

		noiselevel = Max(0, noiselevel - 6);
		extravisibility = Max(0, extravisibility - 5);
	}

	void CountAlertedSneakables()
	{
		ThinkerIterator it = ThinkerIterator.Create("SneakableGuardEyesAlerted", Thinker.STAT_DEFAULT - 2);
		SneakableGuardEyesAlerted mo;

		int count = 0;
		while (mo = SneakableGuardEyesAlerted(it.Next())) { count++; }

		it = ThinkerIterator.Create("Nazi", Thinker.STAT_DEFAULT);
		Nazi nmo;

		while (nmo = Nazi(it.Next()))
		{
			if (
				!nmo.user_sneakable &&
				nmo.health > 0 &&
				nmo.bShootable &&
				nmo.user_incombat &&
				nmo.target &&
				nmo.target == Owner &&
				(nmo.CheckSight(Owner) || Owner.Distance3d(nmo) < 256) &&
				!(nmo is "Rottweiler") // Don't count dogs as alerted, so if just dogs are alerted, you're still stealthy
			) { count++; }
		}

		alertedcount = count;
	}

	override void Tick(void)
	{
		if (Owner && Owner is "PlayerPawn")
		{
			if (timeout <= 0)
			{
				timeout = 35; // Only do this once a second
				CountAlertedSneakables();

			}
			timeout--;

			if (alertedcount <= 0) { DoVisibility(); }
		}

		Super.Tick();
	}

	States
	{
		Use:
			TNT1 A 0;
			Fail;
		Pickup:
			TNT1 A 0
			{
				return true;
			}
			Stop;
	}
}