//===========================================================================
//
// SpriteShadow
//
// Duke3D-style Actor Shadows
//
// Written by Nash Muhandes
//
// Feel free to use this in your mods. No need to ask for my permission!
//
// * This version contains additional BoA-specific changes by other authors!
//    - Shadows grow in size and fade away as the z-height of their parent
//	actor above the floor z-height increases.
//    - Shadows fade as the player moves away from them, and completely
//	disappear when the player is the set render distance away.
//    - BoA 'Base' class actor descendants have a 'shadow' boolean that
//	can be used to directly set whether they are shadowed or not.
//    - The 'Z_DontShadeMe' actor can be given to any actor that would
//	normally be shadowed in order to keep a shadow from being drawn.
//
// * Original source: https://forum.zdoom.org/viewtopic.php?f=105&t=54992
//
//===========================================================================

class Z_SpriteShadow : Actor
{
	Default
	{
		Alpha 0.0;
		RenderStyle "Stencil";
		StencilColor "Black";
		+NOBLOCKMAP
		+NOINTERACTION
		+NOTONAUTOMAP
	}

	Actor caster;
	Inventory casterHasShadow;
	bool bStopTicking;
	double heightdelta;

	transient CVar cvShadowDistance;
	double shadowDist;

	void UpdateShadowDistance(void)
	{
		if (!cvShadowDistance) return;
		shadowDist = cvShadowDistance.GetFloat();
	}

	override void PostBeginPlay()
	{
		cvShadowDistance = CVar.FindCVar("cl_boaspriteshadowdistance");
		UpdateShadowDistance();
		Super.PostBeginPlay();
	}

	override void Tick(void)
	{
		if (!cvShadowDistance || !bNoTimeFreeze && (globalfreeze || level.Frozen)) return;

		if (!bStopTicking)
		{
			Super.Tick();
			bStopTicking = true;
			return;
		}
		else if (!shadowDist || (caster && caster.CheckSightOrRange(shadowDist)))
		{
			return;
		}
		else
		{
			if (caster && players[consoleplayer].camera)
			{
				casterHasShadow = caster.FindInventory("Z_ShadeMe");

				// filter your own shadow and hide it from your first person view
				if (caster is "PlayerPawn" && players[consoleplayer].mo == caster)
				{
					if (players[consoleplayer].camera == players[consoleplayer].mo && !(caster.player.cheats & CF_CHASECAM))
					{
						bInvisible = true;
					}
					else
					{
						bInvisible = false;
					}
				}
				else
				{
					let c = players[consoleplayer].camera;

					if (c && c.CheckLocalView(consoleplayer))
					{
						// hide shadow if you are under the monster
						if (c && c.Pos.Z + (c.player ? c.player.viewheight : c.GetCameraHeight()) < Pos.Z)
							bInvisible = true;

						// always visible for monsters
						else bInvisible = false;
					}
					else
					{
						return;
					}
				}

				heightdelta = max(1.0 - ((caster.pos.z - FloorZ) / 128), 0.001); // Difference between z position of parent actor and the floor height, as a percentage of an arbitrary number of units (with a min value to avoid division by 0)

				// sync size of bounding box
				if (Radius != caster.Radius || Height != caster.Height)
				{
					A_SetSize(caster.Radius, caster.Height);
				}

				// sync sprites and angle
				Sprite = caster.Sprite;
				Frame = caster.Frame;
				Angle = caster.Angle;

				// sync alpha
				alpha = caster.alpha * 0.5 * heightdelta; // heightdelta makes shadows that are farther from the parent actor more transparent

				// fade the shadow out along a smooth curve as you get closer to the defined max draw distance
				alpha *= cos(clamp(Distance2D(players[consoleplayer].camera) / shadowDist, 0.0, 1.0) * 180) / 2 + 0.5;

				// sync scale
				Scale.X = caster.Scale.X / clamp(heightdelta, 0.666, 1.0); // heightdelta makes shadows that are farther from the parent actor bigger (clamped to 1.5x size)

				Scale.Y = caster.Scale.Y * 0.1 / clamp(heightdelta, 0.666, 1.0); // heightdelta makes shadows that are farther from the parent actor bigger (clamped to 1.5x size)


				// sync position (offset shadow away from local camera)
				if (!players[consoleplayer].camera) return;
				Vector3 sPos = (
					caster.Pos.X + cos(players[consoleplayer].camera.Angle) * 0.01,
					caster.Pos.Y + sin(players[consoleplayer].camera.Angle) * 0.01,
					caster.FloorZ
					);
				SetOrigin(sPos, true);

				return;
			}
			else if (!caster || (caster && !casterHasShadow))
			{
				// clean-up
				Destroy();
				return;
			}
		}
	}
}

class Z_ShadeMe : CustomInventory
{
	Default
	{
		FloatBobPhase 0;
		Inventory.MaxAmount 1;
		+INVENTORY.UNDROPPABLE
		+INVENTORY.UNTOSSABLE
		+INVENTORY.AUTOACTIVATE
	}

	Z_SpriteShadow myShadow;

	override void Tick(void)
	{
		if (Owner && !myShadow)
		{
			// spawn the shadow
			let mo = Z_SpriteShadow(Spawn("Z_SpriteShadow", (Owner.Pos.xy, Owner.floorz), NO_REPLACE));

			if (mo)
			{
				myShadow = mo;
				mo.caster = Owner;
			}
		}
	}

	States
	{
		Use:
			TNT1 A 0;
			Fail;
		Pickup:
			TNT1 A 0 { return true; }
			Stop;
	}
}

class Z_DontShadeMe : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

class SpriteShadowHandler : EventHandler
{
	transient CVar cvShadowDistance;

	double shadowDistOld, shadowDistNew;

	override void OnRegister()
	{
		cvShadowDistance = CVar.FindCVar("cl_boaspriteshadowdistance");
	}

	// Player-specific stuff
	void DoSpawnPlayerShadow(PlayerPawn p)
	{
		if (p) p.A_GiveInventory("Z_ShadeMe", 1);
	}

	void DoRemovePlayerShadow(PlayerPawn p)
	{
		if (p)
		{
			let shadeMe = Z_ShadeMe(p.FindInventory("Z_ShadeMe"));
			if (shadeMe) shadeMe.Destroy();
		}
	}

	override void PlayerEntered(PlayerEvent e)
	{
		let p = players[e.PlayerNumber].mo;
		if (p) DoSpawnPlayerShadow(p);
	}

	override void PlayerRespawned(PlayerEvent e)
	{
		let p = players[e.PlayerNumber].mo;
		if (p) DoSpawnPlayerShadow(p);
	}

	override void PlayerDied(PlayerEvent e)
	{
		let p = players[e.PlayerNumber].mo;
		if (p) DoRemovePlayerShadow(p);
	}

	override void WorldUnloaded(WorldEvent e)
	{
		// player is leaving this level, so mark their shadows for destruction
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			let p = players[i].mo;

			if (p && playeringame[i])
			{
				// find the shadow and destroy it
				let shadeMe = Z_ShadeMe(p.FindInventory("Z_ShadeMe"));

				if (shadeMe && shadeMe.myShadow)
				{
					shadeMe.myShadow.Destroy();
				}

				DoRemovePlayerShadow(p);
			}
		}
	}

	override void WorldTick(void)
	{
		if (!cvShadowDistance) return;

		PlayerInfo p = players[consoleplayer];
		if (!p) return;

		double shadowDist = GetShadowDistance();

		// update shadow distance
		shadowDistNew = shadowDist;
		if (shadowDistOld != shadowDistNew)
		{
			ThinkerIterator it = ThinkerIterator.Create("Z_SpriteShadow");
			Z_SpriteShadow shadow;
			while (shadow = Z_SpriteShadow(it.Next()))
			{
				shadow.UpdateShadowDistance();
			}
			shadowDistOld = shadowDistNew;
		}

		// look for shadow casters around you
		ThinkerIterator it = ThinkerIterator.Create("Actor");
		Actor mo;
		while (mo = Actor(it.Next()))
		{
			if (!mo.bIsMonster || mo is "PlayerPawn" || (mo is "Base" && !Base(mo).shadow) || mo.CountInv("Z_DontShadeMe")) continue;

			// intentionally using 2D distance because it's faster
			if (mo.Distance2DSquared(p.camera) > shadowDist ** 2)
			{
				let shadeMe = Z_ShadeMe(mo.FindInventory("Z_ShadeMe"));

				if (!shadeMe)
				{
					continue;
				}
				else if (shadeMe && shadeMe.myShadow)
				{
					shadeMe.myShadow.Destroy();
					shadeMe.Destroy();
				}

				continue;
			}
			else
			{
				mo.A_GiveInventory("Z_ShadeMe", 1);
			}
		}
	}

	double GetShadowDistance(void)
	{
		if (!cvShadowDistance) return 0;
		return cvShadowDistance.GetFloat();
	}
}