/*

  Version of standard dynamic light that spawns a helper actor that sets the
  visibility variable of any player in proximity to the light, based on the
  distance that the payer is from the center of the light

  These lights automatically replace all point lights.

*/
class AlertPointLight : PointLight replaces PointLight
{
	bool sneakables;

	override void PostBeginPlay()
	{
		sneakables = SneakableActors();

		if (!bDormant) { SpawnLight(); }

		Super.PostBeginPlay();
	}

	override void Activate(Actor activator)
	{
		Super.Activate(activator);

		if (bDormant) { DestroyLight(); }
		else { SpawnLight(); }
	}

	override void Deactivate(Actor activator)
	{
		Super.Deactivate(activator);

		if (bDormant) { DestroyLight(); }
		else { SpawnLight(); }
	}

	void SpawnLight()
	{
		if (sneakables) { A_SpawnItemEx("AlertLight", flags:SXF_SETMASTER); } // Only spawn AlertLight if there are sneakables in the level

		bDormant = false;
	}

	void DestroyLight()
	{
		A_RemoveChildren(TRUE, RMVF_MISC);

		bDormant = true;
	}

	bool SneakableActors() // Are there sneakable actors in the level?
	{
		ThinkerIterator it = ThinkerIterator.Create("StealthBase", Thinker.STAT_DEFAULT - 2); // Just iterate over the sneakable eyes - faster than all Nazi actors
		StealthBase mo;
		while (mo = StealthBase(it.Next(true)))
		{
			return true;
		}

		return false;
	}
}

/*

  Helper actor that handles changing the player's visibility value based on
  how close the player is to the center of the light.

  By default, when spawned by the point light replacement above, which sets
  itself as master to the AlertLight, this actor automatically scales itself
  to match the dynamic light's radius, and uses the brightness of the dynamic
  light to scale the visibility value that it sets for the player.

  If placed directly in-editor, argument 0 is used to set the radius of the
  visibility increase (with a fall-back to 64 units if no value is provided),
  and the brightness of the light is assumed to be 100%.

  If spawned by an actor that sets itself as the AlertLight's tracer, the
  brightness of the light is scaled based on the alpha value of the tracer
  actor.  This is used in-game by the Volumetric Light actor.

*/
class AlertLight : Actor
{
	double checkRadius;
	double oldVisibility;

	Default
	{
		//$Category Misc (Wolf3D)
		//$Title Alert Light (stealth)
		//$Color 1
		DistanceCheck "zscriptlod";
		+INVISIBLE
		+NOGRAVITY
	}

	States
	{
		Spawn:
			UNKN A 1;
			Loop;
	}

	override void PostBeginPlay()
	{
		if (master) {
			checkRadius = master.args[3]; // If spawned and master is set, use parent's arg[3] as check radius
		} else {
			checkRadius = args[0]; // Otherwise, use the actor's arg[0]
		}
		if (!checkRadius) { checkRadius = 64; } // If nothing was set, use 64 map unit radius
	}

	void A_AddVisibility(int minlight = 0)
	{
		if (target)
		{
			Inventory vis = target.FindInventory("BoAVisibility");
			if (vis)
			{
				double brightness = 1;
				if (tracer) { brightness = min(tracer.alpha * 1.5, 1.0); }
				if (master) { brightness = (master.args[0] + master.args[1] + master.args[2]) / (255. * 3) * 1.25; } // Calculate the light's overall brightness

				double amount = checkRadius * 2 - Distance3d(target) + 8 + minlight; // Calculate visibility based on how close the player is to the light

				amount *= brightness; // Adjust based on brightness level

				oldVisibility = BoAVisibility(vis).extravisibility;
				BoAVisibility(vis).extravisibility  = int(oldvisibility + Max(amount - oldVisibility, 0)); // Set the new visibility - use delta in value instead of overriding so that multiple lights can be additive in visibility
			}
		}
	}

	override void Tick()
	{
		A_LookEx(LOF_NOSOUNDCHECK | LOF_DONTCHASEGOAL | LOF_NOSEESOUND | LOF_NOJUMP, 0, checkRadius * 2, 0, 360, null);

		if (target)
		{
			A_AddVisibility();
			target = null;
		}
	}
}

class SpotlightMount : Actor
{
	Actor light;
	int user_minAngle;
	int user_maxAngle;
	int user_position;
	int user_sightRange;
	int user_holdTime;
	int user_direction;

	Default
	{
		//$Category Hazards (Wolf3D)
		//$Title Spotlight
		//$Color 3
		//$Arg0 "Left Swing Amount"
		//$Arg0Tooltip "Radius of turn to the left in degrees\nDefault: 0"
		//$Arg1 "Right Swing Amount"
		//$Arg1Tooltip "Radius of turn to the right in degrees\nDefault: 0"
		//$Arg2 "Script Number"
		//$Arg2Tooltip "Script to run when player enters range of spotlight\nDefault: 0"
		//$Arg3 "Script Argument 1"
		//$Arg3Tooltip "Argument to pass to script as argument 1\nDefault: 0"
		//$Arg4 "Script Argument 2"
		//$Arg4Tooltip "Argument to pass to script as argument 2\nDefault: 0"
		+DONTFALL
		+DONTTHRUST
		+NOBLOOD
		+SHOOTABLE
		+FLOORCLIP
		+DONTSPLASH
		+NOGRAVITY
		Health 100;
		Height 56;
		DistanceCheck "scenelod";
	}

	States
	{
		Spawn:
			MDLA A Random(1, 35);
		SpawnLoop:
			MDLA A 1;
			Loop;
		Death:
			"####" B 0 {
				A_RemoveChildren(TRUE, RMVF_EVERYTHING);
				A_SpawnItemEx("Debris_GlassShard_Medium", 0, 0, 0, random(1,3), random(1,3), random(1,3), random(0,360), SXF_CLIENTSIDE);
				A_PlaySound("GLASS5");
				A_SpawnProjectile("Spark_B1", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_W2", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_W3", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_O4", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_O5", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_O6", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_O7", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y8", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y9", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y10", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y11", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y12", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y13", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y14", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y15", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
				A_SpawnProjectile("Spark_Y16", 0, 0, random(0,360), CMF_AIMDIRECTION|CMF_BADPITCH, random(-67,-113));
			}
			"####" B -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		if (pitch == 0 && args[0] == 0 && args[1] == 0)
		{
			pitch = 90;
			args[0] = 45;
			args[1] = 45;
		}

		user_minAngle = -args[1];
		user_maxAngle = args[0];
		user_position = 0;
		user_sightRange = 1024;
		user_direction = RandomPick(-1, 1);

		A_SpawnItemEx("SpotlightFlare", 5.0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);
		A_SpawnItemEx("SpotlightBeam", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER | SXF_NOCHECKPOSITION | SXF_TRANSFERPITCH);

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (globalfreeze || level.Frozen) { return; }

		if (health && bShootable)
		{
			if (args[0] != 0 && args[1] != 0) {
				if (user_position >= user_maxAngle || user_position <= user_minAngle) {
					user_holdTime++;
					if (user_holdTime >= 70) {
						user_holdTime = Random(0, 35);
						user_direction = -user_direction;
						user_position += user_direction;
						angle += user_direction;
					}
				} else {
					user_position += user_direction;
					angle += user_direction;
				}
			}
		}

		Super.Tick();
	}
}

class SpotlightFlare : SwitchableDecoration
{
	Default
	{
		+NOBLOCKMAP
		+NOCLIP
		+NOGRAVITY
		+NOINTERACTION
		Height 16;
		Radius 16;
		Scale 0.5;
		RenderStyle "Add";
		DistanceCheck "sfxlod";
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetScale(2.0);
		Active:
			FLAR A 1 BRIGHT;
			TNT1 A 0 A_Warp(AAPTR_MASTER, cos(pitch) * 5.0, 0, sin(pitch) * 5.0, 0, WARPF_COPYPITCH);
			Loop;
		Inactive:
			TNT1 A -1;
			Loop;
	}
}

class SpotlightBeam : Actor
{
	Actor light;

	Default
	{
		+BRIGHT
		+NOBLOCKMAP
		+NOGRAVITY
		DistanceCheck "sfxlod";
		RenderStyle "Add";
		Alpha 0.4;
	}

	override void Tick()
	{
		if (globalfreeze || level.Frozen) { return; }

		if (!light)
		{
			light = Spawn("SpotlightBeamLight", pos);
			if (light) { light.master = self; }
		}

		if (master)
		{
			angle = master.angle;
			pitch = master.pitch;

			if (pos != master.pos) { SetOrigin(master.pos, true); }
		}

		Super.Tick();
	}

	States
	{
		Spawn:
			MDLA A 1;
			Loop;
	}

}

class SpotlightBeamLight : SpotLightAttenuated
{
	Actor mount;

	override void PostBeginPlay()
	{
		args[0] = 220;
		args[1] = 220;
		args[2] = 255;
		args[3] = 1024;

		spotinnerangle = 17;
		spotouterangle = 18;

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (master)
		{
			angle = master.angle;
			pitch = master.pitch + (master is "SpotLightBeam" ? 90 : 0);

			if (master.master) { mount = master.master; }

			if (pos != master.pos) { SetOrigin(master.pos, true); }
		}
		else { Destroy(); }

		A_LookEx(LOF_NOSOUNDCHECK | LOF_DONTCHASEGOAL | LOF_NOSEESOUND | LOF_NOJUMP, 0, args[3], 0, spotouterangle * 2, null);

		if (target)
		{
			double relpitch = PitchTo(target, self, pitch);

			// Use custom function instead of AngleTo in order to account for target actor radius
			Vector2 posoffset = pos.xy - target.pos.xy; // Get offsets
			posoffset = RotateVector(posoffset, -angle); // Rotate to align with 0 degrees to remove rotation from calculations

			// Calculate the angle to the left and right sides of the actor, and return whichever is smaller
			double relangle = min(atan((posoffset.y + target.radius * 0.7) / posoffset.x), atan((posoffset.y - target.radius * 0.7) / posoffset.x));  // Radius is fudged by 0.7 since most actors's center of mass doesn't take up the whole radius

			double reldist = sqrt(relpitch ** 2 + relangle ** 2); // Get the distance from light cone center using the calculated pitch and angle

			if (reldist < spotouterangle * 1.5) // Use 1.5 times the outer angle so that we have wiggle room to calculate the ramp up to full light level
			{
				AddVisibility(reldist); // Do the visibility calculations and addition

				if (mount && mount.args[2]) { // Execute the script that is set on the spotlight base
					ACS_ExecuteAlways(mount.args[2], 0, mount.args[3], mount.args[4]);
				} else {
					A_AlertMonsters(1280); //Still fall back to alerting monsters if no script number supplied.
				}
			}
		}

		target = null;

		Super.Tick();
	}

	// Return the aim pitch offset from the source to the target
	double PitchTo(Actor mo, Actor source = null, double sourcepitch = 0)
	{
		if (source == null) { source = self; }
		if (!sourcepitch) { sourcepitch = source.pitch; }

		double distxy = max(source.Distance2D(mo), 1);
		double distz = source.pos.z - mo.pos.z;

		double targetheight = target.player ? target.height * target.player.crouchfactor : target.height; // Get target height, with crouching if applicable

		double pitchcalc = min(atan(distz / distxy), atan((distz - targetheight) / distxy)); // Return whichever is lower: pitch to actor bottom or actor top.

		return pitchcalc - sourcepitch % 360; // Normalize to 360 degree range
	}

	void AddVisibility(double amt, double max = 75)
	{
		if (target)
		{
			Inventory vis = target.FindInventory("BoAVisibility");
			if (vis)
			{
				double brightness = (args[0] + args[1] + args[2]) / (255. * 3) * 1.25; // Calculate the light's overall brightness

				double amount;

				if (spotinnerangle - amt < 0) // When in between inner and outer angles...
				{
					amount = spotouterangle * 1.5 - amt;
					amount = amount / max((spotouterangle * 1.5 - spotinnerangle * 1.5), 1) * max; // Ramp up intensity proportionate to distance from inner angle edge
				}
				else { amount = max; } // Use full amount when located inside the center radius of the spotlight

				amount *= brightness; // Adjust based on brightness level

				amount = clamp(amount, 0, max); // Make sure the numbers are withint he right range

				double oldVisibility = BoAVisibility(vis).extravisibility;
				BoAVisibility(vis).extravisibility  = int(oldvisibility + Max(amount - oldVisibility, 0)); // Set the new visibility - use delta in value instead of overriding so that multiple lights can be additive in visibility
			}
		}
	}
}