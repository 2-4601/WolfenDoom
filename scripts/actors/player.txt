class BoAPlayer : PlayerPawn
{
	double user_crouch;
	double user_ScaleY;
	int user_visibility;
	int suspicion;
	Actor CrosshairTarget;
	Actor ForcedHealthBar;

	Default
	{
		+DONTBLAST // avoid kick's blast effect while kicking at walls
		+THRUSPECIES // Needed for swimming through SharkBlockers.
		Species "Player";
		Player.MaxHealth 100; // Needed for improved vitality serum
		Player.InvulnerabilityMode "reflective";
		Player.StartItem "KnifeSilent";
		Player.StartItem "TrenchShotgunLoaded",8;
		Player.StartItem "Browning5Loaded",4;
		Player.StartItem "MP40Loaded",32;
		Player.StartItem "G43Loaded",10;
		Player.StartItem "Walther9mmLoaded",8;
		Player.StartItem "Luger9mmLoaded",8;
		Player.StartItem "StenLoaded",32;
		Player.StartItem "Kar98kLoaded",5;
		Player.StartItem "PyrolightLoaded",25;
		Player.StartItem "PanzerschreckLoaded";
		Player.StartItem "AstroShotgunLoaded",8;
		Player.StartItem "AstroRocketLauncherLoaded",5;
		Player.StartItem "AstroChaingunLoaded",30;
		Player.StartItem "Stamina", 100;
		Player.ViewHeight 56;
		Player.AttackZOffset 24;
		Player.DisplayName "William Blazkowicz";
		Player.CrouchSprite "PLYC";
		Player.SideMove 1.0,0.5;
		Player.ForwardMove 1.0,0.5;
		Player.ViewBob 0.44;
		Player.WeaponSlot 1, "KnifeSilent", "Shovel", "Firebrand", "AstrosteinMelee";
		Player.WeaponSlot 2, "Luger9mm", "Walther9mm";
		Player.WeaponSlot 3, "TrenchShotgun", "Browning5", "AstroShotgun";
		Player.WeaponSlot 4, "MP40", "Sten", "AstroChaingun";
		Player.WeaponSlot 5, "Kar98k", "G43", "UMG43";
		Player.WeaponSlot 6, "Pyrolight", "Nebelwerfer", "AstroRocketlauncher";
		Player.WeaponSlot 7, "Panzerschreck";
		Player.WeaponSlot 8, "NullWeapon";
		Player.DamageScreenColor "ff ff ff", 1, "IceWater";
		Player.DamageScreenColor "64 00 C8", 1, "MutantPoison";
		DamageFactor "Creepy", 0.0;
		DamageFactor "FriendlyFrag", 0.5;
		Scale 0.65;
	}

	States
	{
	Spawn:
		PLAY A 1 NoDelay {
			if (user_ScaleY == 0) { user_ScaleY = Scale.Y; }
		}
		"####" # 0 A_JumpIfInventory("PowerWeaponLevel2", 1, "Spawn.Blade");
		"####" # 0 A_JumpIfInventory("ScientistUniformToken", 1, "Spawn.Uniform");
		Loop;
	Spawn.Uniform:
		PLSC A 1;
		"####" # 0 A_Jump(256, "See");
	Spawn.Blade:
		PLAB A 1;
		"####" # 0 A_Jump(256, "See.Blade");
	See:
		"####" AAAAAAABBBBBBBBCCCCCCCCDDDDDDDD 1 { //Check for change every tic, but still let each frame display for 8 tics (A is only 7 times here to account for the lead in frame set in other states)
			user_crouch = GetCrouchFactor(AAPTR_DEFAULT);

			if (CountInv("ScientistUniformToken") > 0) {
				if (user_crouch < 0.75) { 
					return ResolveState("See.Scientist.Crouch");
				} else {
					Scale.Y = user_ScaleY;
					return ResolveState("See.Scientist");
				}
			} else {
				Scale.Y = user_ScaleY;
				return ResolveState(null);
			}
		}
		PLAY A 1;
		Loop;
	See.Scientist:
		PLSC A 1;
		"####" # 0 A_Jump(256, "See.Resume");
	See.Blade:
		PLAB A 1;
		"####" # 0 A_Jump(256, "See.Blade2");
	See.Blade2: //warning: this addition may cause some weird animations - ozy81
		"####" AAAAAAABBBBBBBBCCCCCCCCDDDDDDDD 1 {
			user_crouch = GetCrouchFactor(AAPTR_DEFAULT);

			if (CountInv("PowerWeaponLevel2") > 0) {
				if (user_crouch < 0.75) { 
					return ResolveState("See.Blade.Crouch");
				} else {
					Scale.Y = user_ScaleY;
					return ResolveState("See.Blade");
				}
			} else {
				Scale.Y = user_ScaleY;
				return ResolveState(null);
			}
		}
		Goto See;
	See.Scientist.Crouch:
		PLYS A 1;
		"####" # 0 A_Jump(256, "See.Resume");
	See.Blade.Crouch:
		PLYB A 1;
		"####" # 0 A_Jump(256, "See.Resume2");
	See.Resume:
		"####" AAAAAAABBBBBBBBCCCCCCCCDDDDDDDD 1 {
			Scale.Y = user_ScaleY / user_crouch; //Negate crouch sprite scaling
			if ((vel.x + vel.y) == 0 || GetCrouchFactor(AAPTR_DEFAULT) != user_crouch) { //Get rid of the 'running in place' effect and check if crouch state changed
				if (CountInv("ScientistUniformToken") > 0) {
					return ResolveState("See");
				} else {
					Scale.Y = user_ScaleY;
					return ResolveState("Spawn");
				}
			} else {
				return ResolveState(null);
			}
		}
		"####" # 0 A_Jump(256, "See");
	See.Resume2:
		"####" AAAAAAABBBBBBBBCCCCCCCCDDDDDDDD 1 {
			Scale.Y = user_ScaleY / user_crouch; //Negate crouch sprite scaling
			if ((vel.x + vel.y) == 0 || GetCrouchFactor(AAPTR_DEFAULT) != user_crouch) { //Get rid of the 'running in place' effect and check if crouch state changed
				if (CountInv("PowerWeaponLevel2") > 0) {
					return ResolveState("See");
				} else {
					Scale.Y = user_ScaleY;
					return ResolveState("Spawn");
				}
			} else {
				return ResolveState(null);
			}
		}
		"####" # 0 A_Jump(256, "See");
	Pain:
		"####" G 0 ACS_NamedExecuteWithResult("PlayerFlinch", 0);
		"####" G 4 A_Pain;
		"####" # 0 A_Jump(256, "Spawn");
	Missile: //Until we have Melee and Missile states set with PLAY, we can't see proper shooting frames while wearing the Scientist uniform - ozy81
		PLAY E 12;
		"####" # 0 A_Jump(256, "Spawn");
	Melee:
		PLAY F 6;
		"####" # 0 A_Jump(256, "Missile");
	Disintegrate: //here in order to transfer properly frames if needed - ozy81
		"####" G 0 A_Playsound("astrostein/guard_death");
		"####" G 5 A_PlayerScream;
		"####" G 0 A_NoBlocking;
		"####" G 0 A_SpawnItemEx("BaseLineSpawner", random(16, -16), random(16, -16), random(0, 8), 0, 0, random(1,3), 0, 129, 0);
		"####" GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG 1 A_FadeOut(0.02,0);
		TNT1 A -1 A_SetTranslucent(1);
		Stop;
	Death:
		"####" H 5 A_PlayerScream;
		"####" I 8;
		"####" I 1 A_PlaySound("death/bjfall");
		"####" J 5 A_NoBlocking;
		"####" K 5;
		"####" LM 2;
		"####" N -1;
		Stop;
	Death.Fire:
		TNT1 A 0 A_Jump(256,"Death.Fire.A","Death.Fire.B");
	Death.Fire.A:
		BURN A 5 BRIGHT Light("ITBURNS1");
		"####" BC 5 BRIGHT Light("ITBURNS1") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,32), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" D 5 BRIGHT Light("ITBURNS1") A_PlaySound("death/burning");
		"####" E 5 BRIGHT Light("ITBURNS1") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,32), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" FABCD 5 BRIGHT Light("ITBURNS2") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,32), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" EFAG 5 BRIGHT Light("ITBURNS3");
		"####" H 5 BRIGHT Light("ITBURNS3") A_NoBlocking;
		"####" IJK 5 BRIGHT Light("ITBURNS2") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,16), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" LMN 5 BRIGHT Light("ITBURNS1") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,8), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" O -1;
		Stop;
	Death.Fire.B:
		NRUB A 5 BRIGHT Light("ITBURNS1");
		"####" BC 5 BRIGHT Light("ITBURNS1") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,32), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" D 5 BRIGHT Light("ITBURNS1") A_PlaySound("death/burning");
		"####" E 5 BRIGHT Light("ITBURNS1") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,32), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" FABCD 5 BRIGHT Light("ITBURNS2") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,32), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" EFAG 5 BRIGHT Light("ITBURNS3");
		"####" H 5 BRIGHT Light("ITBURNS3") A_NoBlocking;
		"####" IJK 5 BRIGHT Light("ITBURNS2") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,16), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" LMN 5 BRIGHT Light("ITBURNS1") A_SpawnItemEx("FloatingCinder", random(-8,8), random(-8,8), random(0,8), 1, 0, random (1, 3), random (0, 360), SXF_TRANSFERPITCH | SXF_CLIENTSIDE, 160);
		"####" O -1;
		Stop;
	}

	override void Tick()
	{
		ForcedHealthBar = GetClosestForcedHealthBar();
		CrosshairTarget = GetLineTarget();

		Super.Tick();
	}

	Actor GetLineTarget()
	{
		FTranslatedLineTarget t;
		AimLineAttack(angle, 1024, t, 0.5);

		return t.linetarget;
	}

	Actor GetClosestForcedHealthBar()
	{
		ThinkerIterator Finder = ThinkerIterator.Create("Base");
		Base it;
		Actor mo;

		while ( it = Base(Finder.Next()) )
		{
			if (!it.user_DrawHealthBar == True) { continue; } // Only process actors with the AlwaysDrawHealthBar flag set
			if (
				it.health <= 0 ||
				!it.bShootable ||
				it.bDormant
			) { continue; }
			if (mo && Distance3D(it) > Distance3D(mo)) { continue; } // Only draw health bar for the closest one

			mo = it;
		}

		return mo;
	}
}
