class SkyViewPointStatic : SkyViewPoint
{
	PlayerPawn base;
	Vector3 basepos;
	int scaling;

	Default
	{
		//$Arg1 "Skybox Scene Scale"
		//$Arg1Tooltip "The scale of the skybox's scene (default is 100).  The larger this number is, the farther away the skybox contents will appear to be."
	}

	override void PostBeginPlay()
	{
		// Set the scaling value according to whatever arg 1 value is passed; use 100 if nothing provided
		scaling = args[1] == 0 ? 100 : args[1];

		// Save the spawn location vector for later
		SpawnPoint = pos;

		// Iterate through all of the possible players int he game
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			// If a player is in the game and has spawned...
			if (playeringame[i] && players[i].mo)
			{
				if (!base) { base = players[i].mo; } // Set the skybox to follow the first player who is in the game
				else { base = null; break; } // If there are multiple players, don't move the skybox
			}
		}
	}

	override void Tick()
	{
		if (base)
		{
			// Account for viewpoint and player rotation angle
			Vector2 temp = -RotateVector(base.vel.xy, deltaangle(angle, AngleTo(base)));
			double heightdelta = (base.pos.z - base.floorz) / scaling;

			// Reset the viewpoint's speed to 0 and height location, just in case
			vel *= 0;
			SetOrigin((pos.x, pos.y, SpawnPoint.z + heightdelta), true);

			// Only move the viewpoint if the player actually is moving along an axis; otherwise stay still
			if (basepos.x != base.pos.x) { vel.x = temp.x; }
			if (basepos.y != base.pos.y) { vel.y = temp.y; }
			vel.z = -base.vel.z;

			// Adjust the move amount by scaling value
			vel /= scaling;

			// Save the player's old position for the move checks
			basepos = base.pos;
		}

		Super.Tick();
	}
}