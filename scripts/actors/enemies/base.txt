// Base class to add ability to see through notarget to actors (e.g., mice, sharks)
class Base : Actor
{
	LookExParams SearchParams;
	String BossIcon;
	bool user_DrawHealthBar;

	Property BossIcon:BossIcon;
	Property AlwaysDrawHealthBar:user_DrawHealthBar;

	state A_LookThroughDisguise(int flags = 0, float minseedist = 0, float Range = 0, float maxheardist = 0, double fov = 0, statelabel label = "See")
	{
		// Try a normal look first!
		A_LookEx(flags, minseedist, Range, maxheardist, fov, label);

		if (!target)
		{
			// Set up view parameters for this search
			SearchParams.fov = bLookAllAround ? 360 : fov;
			SearchParams.minDist = minseedist;
			SearchParams.maxDist = Range;
			SearchParams.maxHearDist = Range;

			for (int p = 0; p < MAXPLAYERS; p++) // Iterate through all of the players and find one that's in range, ignoring NOTARGET
			{
				Actor mo = players[p].mo;

				if (mo) {
					if (!mo.bShootable || mo.health <= 0) { continue; }
					if (isFriend(mo)) { continue; }
					if (Range && Distance3d(mo) > Range) { continue; }
					if (!IsVisible(mo, false, SearchParams)) { continue; }

					let disguise = mo.FindInventory("DisguiseToken", True);
					if (!disguise) { continue; }

					target = mo;
					return ResolveState(label);
				}
			}
		}

		return ResolveState(null);
	}
}

// Base class for almost all enemy actors.
// Adds handling for 'sneakable' actors and stealth/critical hit kills
class Nazi : Base
{
	int user_incombat;
	int perceptionthreshold;
	int perceptionfov;
	int user_chasegoal;
	bool user_sneakable;

	Property Sneakable:user_sneakable;
	Property PerceptionTime:perceptionthreshold; // How many tics the player has to be in sight before NOTARGET fails - 0 means never see through NoTarget
	Property PerceptionFOV:perceptionfov; // FOV used for NOTARGET sight checks (i.e., Gestapo and others who can see through scientist/gestapo uniforms)

	Default
	{
		Monster;
		+BOSSDEATH
		+CANBLAST //needed for kicks - ozy81
		+DONTGIB
		+DONTHARMSPECIES
		+FLOORCLIP
		+NOINFIGHTSPECIES
		DamageFactor "Frag", 1.2; //increased damage from grenades & clusterbombs for Nazi related enemies - this fix TurretSoldiers [ozy81]
		Scale 0.65;
		Height 56;
		Mass 100;
		PainChance 200;
		Speed 2;
		Species "Nazi";

		Nazi.Sneakable False;
		Nazi.PerceptionTime 0;
		Nazi.PerceptionFOV 120;
	}

	States
	{
		Look:
			"####" "#" 10 A_Look();
			Loop;
		See:
			"####" "#" 0 { user_incombat = True; } //mxd
			"####" A 1 A_Chase;
			"####" AAA 1 A_Chase(null,null);
			"####" A 1 A_Chase;
			"####" AAA 1 A_Chase(null,null);
			"####" B 1 A_Chase;
			"####" B 0 A_SpawnItemEx("EnemyStep", 0, 0, 14, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			"####" BBB 1 A_Chase(null,null);
			"####" B 1 A_Chase;
			"####" BBB 1 A_Chase(null,null);
			"####" C 1 A_Chase;
			"####" CCC 1 A_Chase(null,null);
			"####" C 1 A_Chase;
			"####" CCC 1 A_Chase(null,null);
			"####" D 1 A_Chase;
			"####" D 0 A_SpawnItemEx("EnemyStep", 0, 0, 14, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
			"####" DDD 1 A_Chase(null,null);
			"####" D 1 A_Chase;
			"####" DDD 1 A_Chase(null,null);
			Loop;
		Idle:
			"####" AAAAAAAA 1 A_Wander;
			"####" A 0 A_Look;
			"####" BBBBBBBB 1 A_Wander;
			"####" A 0 A_Look;
			"####" CCCCCCCC 1 A_Wander;
			"####" A 0 A_Look;
			"####" DDDDDDDD 1 A_Wander;
			"####" A 0 A_Look;
			Loop;
		Pain:
			"####" H 6 A_NaziPain(256);
			"####" H 0 A_Jump(256,"See");
	}

	// Function to consolidate default pain state actions.  See use above - can be used to eliminate a lot of existing copy/paste.
	void A_NaziPain(int alertrange = 0, bool playsound = True)
	{
		A_SpawnItemEx("Pain_Overlay", scale.x + 3, 0, height - 8, 0, 0, 0, 0, SXF_NOCHECKPOSITION | SXF_USEBLOODCOLOR); // Spawn pain overlay blood spurt
		if (alertrange) { A_AlertMonsters(alertrange); } // Alert monsters in given range
		if (playsound) { A_Pain(); } // Play pain sound unless passed 'false'
	}

	// Initialize actor
	override void BeginPlay()
	{
		// If it's sneakable, spawn a set of the sneakeable eyes and mark it as friendly (and make the actor never infight)
		if (user_sneakable) {
			bFriendly = True;
			bNeverTarget = True; // A bit of a hack, but it works...  Will cause issues if FRIENDLY actors ever need to interact with sneakable actors
			A_SpawnItemEx("SneakableGuardEyesIdle", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER | SXF_NOCHECKPOSITION, 0, tid);
		}
		else if (SneakableActors()) // If there are sneakable actors in the level, no Nazi actors will be targetable - fixes targeting of non-sneakables by idle (friendly) sneakables
		{ // This will break normal expected friendly monster behavior!
			bNeverTarget = True;
		}
	}

	// Hijack the damage calls in order to implement stealth kills and critical hits
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags = 0, double angle = 0)
	{
		String currentDamage = (inflictor && inflictor.paintype) ? inflictor.paintype : mod; // Get the damage type
		int damageamt = Super.DamageMobj(inflictor, source, damage, mod, flags, angle); // Get the damage amount from the real DamageMobj function

		if (currentDamage ~== "SilentKnifeAttack") // If the attack was with the knife
		{
			if (user_sneakable && bFriendly) // If this is a sneakable actor who isn't active yet
			{ // Stealth kill, remove the sneakable eyes, alert a medium radius, and kill the actor
				A_Log(StringTable.Localize("$STEALTH"));
				A_RemoveChildren(TRUE, RMVF_EVERYTHING);
				A_AlertMonsters(160);
				A_Die();
			}
			else if (user_incombat) // If the actor has already been in its See state
			{
				A_PlaySound("Nazi1/Pain", CHAN_AUTO, FRandom(0.2, 0.4), FALSE, ATTN_NORM); // Play quiet pain sound
				A_AlertMonsters(64); //ozy - only if near // Alert small radius
			}
			else // Otherwise, this attack was the equivalent of Stealth Kill for non-sneakable enemies
			{
				user_incombat = True;
				A_Log(StringTable.Localize("$CRITICAL"));
				A_AlertMonsters(128);
				A_DamageSelf(health, "Melee");
			}
		}

		ACS_NamedExecuteAlways("AddExtraVisibility", 0, 200, 1); // Attacking always makes visibility increase significantly

		if (user_sneakable && bFriendly) // If we attacked a sneakable actor who wasn't alerted...
		{
			BecomeAlerted(inflictor); // Alert that actor
		}

		if (damageamt > health) // If we killed the actor...
		{
			if (user_sneakable) // and it was a sneakable actor...
			{
				A_RemoveChildren(TRUE, RMVF_EVERYTHING); // Remove the sneakable eyes
				if (!bFriendly) { ACS_NamedExecute("DecreaseAlertedCount"); } // Decrement the alert counter if the actor had been alerted
			}
		}

		return damageamt; // Function returns amount of damage received by the actor
	}

	// Handling for alerting sneakable actors
	void BecomeAlerted(Actor newtarget = null)
	{
		if (health <= 0 || !bShootable) { return; } // If it's dead, don't do anything
		if (goal) { user_chasegoal = goal.tid; } // Save the navigation goal if one was set

		bFriendly = False; // Set unfriendly
		target = newtarget; // Set target to the player the eyes saw
		A_RemoveChildren(TRUE, RMVF_EVERYTHING); // Get rid of the passive guard eyes
		A_AlertMonsters(512); // Alert an extra-large radius
		A_SpawnItemEx("SneakableGuardEyesAlerted", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER | SXF_NOCHECKPOSITION, 0, tid); // Spawn active guard eyes
		if (target && target.GetSpecies() == GetSpecies()) { target = null; SetStateLabel("Spawn"); }
		SetStateLabel("See"); // Go to See state and start chasing the player (or wandering if target wasn't set for some reason)
	}

	void BecomeIdle()
	{
		if (health <= 0 || !bShootable) { return; }

		bFriendly = True;
		A_ClearTarget();
		ACS_NamedExecute("TryResumePatrolling");
		A_SpawnItemEx("SneakableGuardEyesIdle", 0, 0, 0, 0, 0, 0, 0, SXF_SETMASTER | SXF_NOCHECKPOSITION, 0, tid);
		SetStateLabel("Spawn");
	}

	bool SneakableActors() // Are there sneakable actors in the level?
	{
		int count;

		ThinkerIterator it = ThinkerIterator.Create("Nazi");
		Nazi mo;
		while (mo = Nazi(it.Next(true)))
		{
			if (mo.health > 0 && mo.user_sneakable) { return true; } // Actually check the bool to see if the actor is sneakable
		}
		return false;
	}
}