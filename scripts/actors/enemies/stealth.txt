class StealthBase : Actor
{
	int playernum;
	int threshold;
	int fov;
	double sighttime;
	LookExParams SearchParams;
	Actor alert;

	States
	{
		Spawn:
			TNT1 A 1;
			TNT1 A 0 A_LookForNoTargetPlayer;
			Loop;
		AlertMaster:
			POSS A 70;
			Goto Spawn;
	}

	state A_LookForNoTargetPlayer(int Range = 256)
	{
		if (master && master is "Nazi") // Get the master actor's perceptionfov and perceptionthreshold properties
		{ // These become the fov parameter for visibility checks and the time threshold for how long the player must stay in view before detection
			fov = Nazi(master).perceptionfov;
			threshold = Nazi(master).perceptionthreshold;
		}

		if (threshold <= 0 || fov <= 0) { return ResolveState(null); } // If threshold is 0, the actor can't see through NOTARGET at all, so just return

		target = null; // Clear target, just in case

		// Set up view parameters for this search
		SearchParams.fov = fov;
		SearchParams.minDist = 32;
		SearchParams.maxDist = Range;
		SearchParams.maxHearDist = Range;

		for (int p = 0; p < MAXPLAYERS; p++) // Iterate through all of the players and find one that's in range
		{
			Actor mo = players[p].mo;

			if (mo) {
				if (!mo.bShootable || mo.health <= 0) { continue; }
				if (isFriend(mo)) { continue; }
				if (Distance3d(mo) > Range) { continue; }
				if (!IsVisible(mo, false, SearchParams)) { continue; }

				target = mo;
				playernum = p;
			}
		}

		if (target) // If we have a player in view and he can be seen (default stealth visibility behavior still applies)
		{
			sighttime += (Range - Distance3d(target)) / Range; // Increment sight time counter, scaled to how far away player is

			if (master && !alert)
			{  // Spawn the alert indicator
				alert = Spawn("AlertMarkerAlpha", (master.pos.x, master.pos.y, master.pos.z + 64));
				if (alert) { alert.master = master; }
			}

			if (sighttime >= threshold) // If 'threshold' amount of time has elapsed since player first seen
			{
				sighttime = 0; // Reset the count
				ACS_NamedExecuteAlways("AddExtraVisibility", 0, 200, 1); // Make the player super-visible
				players[playernum].cheats ^= CF_NOTARGET;  // Turn off the player's NOTARGET
				if (BoAPlayer(players[playernum].mo)) { BoAPlayer(players[playernum].mo).suspicion = 0; } // Clear the player's suspicion variable
				if (alert) { alert.Destroy(); } // Get rid of the alert indicator that was spawned here
				return ResolveState("AlertMaster"); // Alert the actor to attack
			}
			else if (sighttime >= threshold / 4) // Otherwise, start looking at the currently targeted player
			{
				if (master) { master.A_Face(target, 0.25); } // (slowly...)
			}
		}
		else { sighttime > 0 ? sighttime -= 0.05 : 0; } // If all players are out of sight, decrement the amount of time elapsed gradually to 0

		if (alert) {
			if (sighttime <= 0) { alert.SetStateLabel("Fade"); } // If we've completely lost sight of the player, fade out the alert indicator
			else // Otherwise, set the alpha and scale to correspond to sight time
			{
				alert.alpha = double(sighttime) / threshold;
				alert.scale.x = alert.scale.y = 1 + alert.alpha; // End scale is 2.0 to match the standard alert marker
			} 

			if (GetCVar("g_debugstealth") > 0) { console.printf("%.2f%%", sighttime * 100 / threshold); }
		}

		if (BoAPlayer(players[playernum].mo)) { BoAPlayer(players[playernum].mo).suspicion = sighttime * 100 / threshold; } // Write the suspicion level to the player's suspicion variable so that it can be used on the hud

		return ResolveState(null);
	}

}

// Version of the alert marker that starts out fully translucent (alpha 0)
class AlertMarkerAlpha : Actor
{
	Default
	{
		+BRIGHT
		+NOGRAVITY
		Scale 1.0;
		Renderstyle "Translucent";
		Alpha 0;
	}

	States
	{
		Spawn:
			EXCL C 1 A_Warp(AAPTR_MASTER, 0, 0, 64);
			Loop;
		Fade:
			EXCL C 1 {
				A_Warp(AAPTR_MASTER, 0, 0, 64);
				A_FadeOut(0.01);
			}
			Loop;
	}
}

// This actor follows SneakableGuard around looking for players
// Almost directly converted from the original decorate version, with the exception of removing Damage/Pain hacks to change states and replacing them with proper state change calls
class SneakableGuardEyesIdle : StealthBase
{
	Default
	{
		+NEVERTARGET
		+NOCLIP
		+NOGRAVITY
		RenderStyle "None";
		Height 46;
	}

	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_SetArg(1, random(490, 630)); // Set quote countdown time to 14 - 18 seconds
			Goto Look;
		Look:
			TNT1 A 1 A_Warp(AAPTR_MASTER, 0, 0, Height); // Need a slight delay between A_Looks to prevent infinite loop
			TNT1 A 0 A_LookEx(0, 0.0, 160.0, 256.0, 160.0, "PlayerSeen"); // Wider FOV sight check for short-range
			TNT1 A 0 A_LookEx(0, 0.0, 1024.0, 256.0, 65.0, "PlayerSeen");
			TNT1 A 0 A_LookForNoTargetPlayer();
			TNT1 A 0 A_CountdownArg(1, "PlayIdleSound");
			Loop;
		PlayIdleSound:
			TNT1 A 0 A_PlaySound("axis1/idle", CHAN_BODY);
			Goto Spawn;
		PlayerSeen:
			TNT1 A 0 A_JumpIf(CallACS("TargetIsHidden"), "IgnorePlayer");
			Goto AlertMaster;
		IgnorePlayer:
			TNT1 A 1 A_ClearTarget;
			Goto Look;
		AlertMaster:
			TNT1 A 0 { 
				A_SpawnItemEx("AlertMarker", 0, 0, 64, 0, 0, 0, 0, SXF_TRANSFERPOINTERS);
				A_PlaySound("axis1/sighted", CHAN_BODY);
				Nazi(master).BecomeAlerted(target); // Cause the master to become alerted
			} 
			Stop;
	}
}

// This actor follows SneakableGuard around checking if players are no longer seen
class SneakableGuardEyesAlerted : SneakableGuardEyesIdle
{
	States
	{
		Spawn:
			TNT1 A 0 NoDelay ACS_NamedExecute("IncreaseAlertedCount");
			TNT1 A 1 A_AlertMonsters(512, AMF_TARGETEMITTER); // Something fishy is going on. Alert everybody around!
			Goto ResetCounters;
		ResetCounters: 
			TNT1 A 0 A_SetArg(0, random(280, 350)); // Set countdown time to 8 - 10 seconds
			TNT1 A 0 A_SetArg(1, random(140, 210));  // Set quote countdown time to 4 - 6 seconds 
			Goto Look;
		Look:
			TNT1 A 1 A_Warp(AAPTR_MASTER, 0, 0, Height); // Need a slight delay between A_Looks to prevent infinite loop
			TNT1 A 0 A_LookEx(0, 0.0, 1024.0, 256.0, 65.0, "PlayerSeen");
			TNT1 A 0 A_CountdownArg(0, "ResetMaster"); // Sets master state to Patrol when the countdown reaches zero
			TNT1 A 0 A_CountdownArg(1, "TryPlayLoosingTargetSound");
			Loop;
		TryPlayLoosingTargetSound:
			TNT1 A 0 A_JumpIf(args[0] > 220, "Look"); // Too early!
			TNT1 A 0 A_PlaySound("axis1/target_not_seen", CHAN_BODY);
			Goto ResetCounters + 1; // Reset quote countdown time only
		PlayerSeen: // Clear target and reset countdown
			TNT1 A 1 A_ClearTarget;
			Goto ResetCounters;
		ResetMaster:
			TNT1 A 0 { Nazi(master).BecomeIdle(); } // Cause the master to become idle
			TNT1 A 0 ACS_NamedExecute("DecreaseAlertedCount");
			Stop;
	}
}