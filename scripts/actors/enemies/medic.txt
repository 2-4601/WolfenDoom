/*

  An actor that looks for dead 'Nazi' class actors to be healed.

  Automatically searches for the closest visible dead 'Nazi' actor that it is allied with (that
  has the same FRIENDLY flag settings) that is not gibbed or burned to ash.  Once the actor is
  identified, the Medic sets the actor as its goal and runs to it.

  Once within range of the goal actor (24 units centerpoint to centerpoint), the Medic enters its
  "Heal" state and begins to resurrect the dead actor.

  While the dead actor is being healed, "HealingParticle" actors are spawned from the dead actor.
  The number of particles spawned, and the number of repetitions of the "Heal" state animation that
  are played, is based on the spawn health of the dead actor; one iteration of the heal animation
  (5 particle spawns) for every 25 hitpoints, with a maximum of 3 iterations.

  The now ressurected actor's target is cleared, and, if they are sneakable, they are set idle.

  The Medic also tries to avoid the player, by running away if a player is visible within 192
  units.  When this happens, the medic also forgets what dead body it was going toward.

  Also can work as FRIENDLY, healing only the FRIENDLY dead actors.

*/
class NaziMedic : NaziStandard
{
	bool crouched;
	int frightenedloopcount;
	int healloopcount;
	Actor body;

	Default
	{
		//$Category Monsters (Wolf3D)
		//$Title Nazi Medic
		//$Color 4
		+AVOIDMELEE
		+NEVERTARGET
		Health 20;
		Speed 6;
		DropItem "NaziMedicBox", 255;
	}

	States
	{
		Spawn:
			NMDC N 1; // Just sets the base sprite
			Goto Look;
		Look:
			"####" "#" 35 A_LookForBodies();
			"####" "#" 0 A_CheckForPlayer(True);
			Loop;
		See:
			Goto See.Dodge;
		Dodge:
			NMDD A 0;
		Dodge.Resume:
			Goto See.Heal;
		See.Heal:
			"####" "#" 0 {
				user_incombat = True;
				crouched = false;
				Speed = Default.Speed;
				bChaseGoal = True;
				bSolid = True;

				if (frightenedloopcount > 0) { frightenedloopcount--; }
				else { bFrightened = False; }

				A_CheckForPlayer();
			}
			"####" AAAAAA 1 A_Chase(null, null);
			"####" B 0 A_SpawnItemEx("EnemyStep",0,0,14,0,0,0,0,SXF_NOCHECKPOSITION);
			"####" BBBBBB 1 A_Chase(null, null);
			"####" CCCCCC 1 A_Chase(null, null);
			"####" D 0 A_SpawnItemEx("EnemyStep",0,0,14,0,0,0,0,SXF_NOCHECKPOSITION);
			"####" DDDDDD 1 A_Chase(null, null);
			Loop;
		Heal:
			"####" E 0 {
				crouched = True;
				if (goal) {
					healloopcount = goal.Default.Health > 25 ? min(goal.Default.Health / 25, 3) : 0; // Set the number of Heal iterations to scale with the actor's spawnhealth (max of 3 loops)
				}
			}
		Heal.Loop:
			"####" E 15;
			"####" F 5;
			"####" EEEEE 3 { goal.A_SpawnItemEx("HealingParticle", random(10,-10), random(10,-10), random(16,64), 0, 0, random(1, 2), 0);} // Spawn healing particles as the actor is ressurected
			"####" E 0 {
				if (healloopcount > 0) {
					healloopcount--;
					return ResolveState("Heal.Loop");
				}

				A_RaiseMaster(RF_NOCHECKPOSITION); // Why is there no direct P_Thing_Raise call?
				goal.bCountKill = false;
				level.total_monsters--;

				if (Nazi(goal))
				{
					if (Nazi(goal).user_sneakable) { Nazi(goal).BecomeAlerted(target); } // If it's a sneakable actor, make it alert
					Nazi(goal).healing = false;
				}
				if (goal) { goal.A_ClearTarget(); goal.bFriendly = bFriendly; goal.BeginPlay(); } // Just to be sure, make the resurrected actor allied to the Medic...
				body = null;
				goal = null;
				master = null;
				return ResolveState("See");
			}
			Goto See;
		Death:
			"####" H 5 {
				if (crouched) { return ResolveState("Death.Crouch"); }
				return ResolveState(null);
			}
			"####" I 5 A_Scream();
			"####" J 5 A_NoBlocking(!user_sneakable);
			"####" KLUV 5;
			"####" W -1;
			Stop;
		Death.Crouch:
			"####" G 5 { crouched = False; }
			"####" Q 5 A_Scream();
			"####" R 5 A_NoBlocking(!user_sneakable);
			"####" STUV 5;
			"####" W -1;
			Stop;
	}

	state A_CheckForPlayer(bool jump = False)
	{
		target = FindClosestPlayer(dist:1024);

		// Run away from any player that's close by
		if (target && target is "PlayerPawn" && (Distance3d(target) <= radius + 192 + target.radius || !goal)) {
			if (Random() < 16 || jump) { A_PlaySound("Nazi1/Sighted", CHAN_ITEM); }
			Speed = Default.Speed * 2;
			bFrightened = True;
			frightenedloopcount = 2;

			if (jump)
			{
				if (!InStateSequence(CurState, SeeState)) { return ResolveState("See"); }
			}
		} else {
			bFrightened = false;
			target = goal;
		}

		return ResolveState(null);
	}

	override state A_LookForBodies()
	{
		ThinkerIterator Finder = ThinkerIterator.Create("Nazi", STAT_DEFAULT);
		Nazi mo;

		while ( (mo = Nazi(Finder.Next())) )
		{
			if (!IsHealableCorpse(mo)) { continue; }

			if (goal && Distance3d(mo) > Distance3d(goal)) { continue; }

			goal = mo;
		}

		// A Second iterator to account for the sneakables...
		Finder = ThinkerIterator.Create("Nazi", STAT_DEFAULT - 5);

		while ( (mo = Nazi(Finder.Next())) )
		{
			if (!IsHealableCorpse(mo)) { continue; }

			if (goal && Distance3d(mo) > Distance3d(goal)) { continue; }

			goal = mo;
		}

		if (goal) { body = goal; return ResolveState("See"); }
		return ResolveState(null);
	}

	bool IsHealableCorpse(Nazi mo)
	{
		if (
			!mo.bIsMonster ||
			mo.healing ||
			mo.health > 0 ||
			mo.bDormant ||
			mo.bFriendly != bFriendly ||
			mo.health <= mo.GetGibHealth() ||
			mo.DeathDamageType ~== "Fire" ||
			!IsVisible(mo, True) ||
			mo.bBoss ||
			mo is "WGuard_Wounded" || // Use "is" so that any class inheriting from this class is skipped
			mo is "Sniper" ||
			mo is "Sniper_Crouch" ||
			mo is "ArcticSniper" ||
			mo is "ArcticSniper_Crouch" ||
			mo is "NaziMedic" ||
			mo is "FlamerSoldier" ||
			mo is "Mechanic" ||
			mo is "EliteFlamer" ||
			mo is "EliteAssaulter" ||
			mo is "EliteSoldatRifler" ||
			mo is "ZombieBrain" ||
			mo is "WereWaffenSS" ||
			mo is "WMP40GuardSleep" ||
			!mo.FindState("Raise") ||
			Distance3d(mo) > 1024
		) { return false; }

		return true;
	}

	override void Tick()
	{
		// If the Medic is alive...
		if (health > 0 && bShootable)
		{
			// If it doesn't have a goal (and isn't running away), look for dead bodies
			if (!goal && !bFrightened)
			{
				if (level.time && level.time % Random(35, 70) == 0) { A_LookForBodies(); }
				if (Nazi(body) && !body.bShootable && !Nazi(body).healing) { goal = body; } // Keep trying to get to the body if it's still dead and isn't being healed
				else { body = null; }
			}
			else if (!bFrightened)
			{
				// If it's not frightened and close to a dead body that it isn't already healing, start healing it
				if (goal && Distance3d(goal) <= goal.radius + radius + 8 && goal != master) {
					if (Nazi(goal)) { Nazi(goal).healing = true; }
					master = goal;
					SetStateLabel("Heal");
				}
			}
			else
			{ // If you are frightened, forget the dead body and run away
				if (Nazi(goal)) { Nazi(goal).healing = false; }
				body = null;
				goal = null;
			}
		}

		Super.Tick();
	}
}