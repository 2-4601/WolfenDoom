Class ProtoDrone : Nazi //ozy81
{
	LaserFindHitPointTracer HitPointTracer;
	LaserBeam beam;
	int firecount;

	Default
	{
		//$Category Monsters (BoA)
		//$Title Prototype Drone
		//$Color 4
		Scale 0.87;
		Health 250;
		Radius 32;
		Mass 400;
		MeleeRange 256;
		MeleeThreshold 256; //forces the melee attack
		MaxTargetRange 896; //same of Arch-Vile, guess it's enough
		Speed 2;
		PainChance 96; //it is a drone, so...
		-FLOORCLIP
		+FLOAT
		+LOOKALLAROUND
		+NOBLOOD
		+NOGRAVITY
		+NOINFIGHTING
		Obituary "$PDRONE";
		SeeSound "proto/see";
		PainSound "drone_pain";
		DeathSound "astrostein/explosion";
		ActiveSound "proto/see";
	}

	States
	{
		Spawn:
			PROT A 0;
			"####" "#" 0 { user_incombat = true; } //mxd
			Goto Look;
		Look:
			PROT A 1 A_Look();
			Loop;
		See:
			PROT A 1 A_Chase();
			"####" AA 1 A_Chase(null, null, CHF_NOPLAYACTIVE);
			Loop;
		Idle:
			PROT AAA 1 A_Wander();
			"####" A 0 A_Look();
			Loop;
		Melee:
			PROT B 0 A_Jump(128,"Melee2");
			"####" B 5 A_FaceTarget();
			"####" B 0 A_PlaySound("astrochaingun/fire", CHAN_WEAPON);
			"####" CDE 8 LIGHT("PROTOFIRE") A_SpawnProjectile("EnemyProtoTracer",Scale.X*2,Scale.Y*-16,random(-12,12));
			"####" B 5 A_FaceTarget();
			"####" B 0 A_PlaySound("astrochaingun/fire", CHAN_WEAPON);
			"####" CDE 8 LIGHT("PROTOFIRE") A_SpawnProjectile("EnemyProtoTracer",Scale.X*2,Scale.Y*-16,random(-12,12));
			Goto See;
		Melee2:
			"####" N 5 A_FaceTarget();
			"####" N 0 A_Jump(128,2);
			"####" N 1 ThrustThing(int(Angle*256/360-192), 8, 1, 0);
			"####" N 0 A_PlaySound("chaingun/fire", CHAN_WEAPON);
			"####" FGHI 2 LIGHT("NAZIFIRE") A_SpawnProjectile("EnemyPistolTracer",Scale.X*2,Scale.Y*16,random(-24,24));
			"####" I 0 A_SpawnItemEx("9MMCasing", Scale.X*2, Scale.Y*16, random(-2,2), RandomPick(-3, 3), random(-1,1), random(2,4), random(-55,-80),SXF_NOCHECKPOSITION);
			"####" N 5 A_FaceTarget();
			"####" N 0 A_Jump(128,2);
			"####" N 1 ThrustThing(int(Angle*256/360-192), 8, 1, 0);
			"####" N 0 A_PlaySound("chaingun/fire", CHAN_WEAPON);
			"####" FGHI 2 LIGHT("NAZIFIRE") A_SpawnProjectile("EnemyPistolTracer",Scale.X*2,Scale.Y*16,random(-24,24));
			"####" I 0 A_SpawnItemEx("9MMCasing", Scale.X*2, Scale.Y*16, random(-2,2), RandomPick(-3, 3), random(-1,1), random(2,4), random(-55,-80),SXF_NOCHECKPOSITION);
			Goto See;
		Missile:
			PROT A 10 {
				A_Playsound("proto/marker", CHAN_AUTO, 0.75);
				firecount = 0;
			}
		Missile.Sight:
			PROT A 1;
			PROT A 0 {
				A_FaceTarget(1.0, 180, flags:FAF_MIDDLE);
				A_FireLaser(0, "", 46, 0, 0.1);

				if (firecount++ < 70 || (!hitpointtracer.Results.HitActor || hitpointtracer.Results.HitActor != target)) { SetStateLabel("Missile.Sight"); }
				else { firecount = 0; }
			}
		Missile.Loop:
			PROT A 1;
			PROT A 0 {
				double laseralpha = max(0.1, double(firecount) / 25);
				A_FireLaser(firecount % 3 == 0, "tesla/loop", 46, firecount % 10 == 0, laseralpha, laseralpha);

				if (firecount++ < 35) { SetStateLabel("Missile.Loop"); }
				else { A_StopSound(CHAN_6); if (beam) { beam.Destroy(); } }
			}
			Goto See;
		Pain:
		Pain.Dagger:
			PROT N 3 { if (beam) { beam.Destroy(); } }
			"####" O 3 A_Pain();
			"####" N 6;
			Goto See;
		Death:
			PROT OPQRS 3;
			"####" T 1 {
				A_Scream();
				A_SpawnItemEx("ProtoExplosion_Medium", 0, 0, 48);
				A_NoBlocking();
			}
			"####" TTTTTTTTTTTT 0 A_SpawnItemEx("Debris_MetalJunk", random(0,8), random(0,16), random(0,48), random(1,3), random(1,3), random(1,3), random(0,360), SXF_CLIENTSIDE);
			"####" TTTTTTTTTTTT 0 A_SpawnItemEx("Debris_MetalJunk", random(8,16), random(16,32), random(48,64), random(1,3), random(1,3), random(1,3), random(0,360), SXF_CLIENTSIDE);
			"####" TTTTTTTTTTTT 0 A_SpawnItemEx("Debris_MetalJunk", random(16,32), random(32,48), random(64,80), random(1,3), random(1,3), random(1,3), random(0,360), SXF_CLIENTSIDE);
			"####" U 3;
			Stop;
	}

	override void PostBeginPlay()
	{
		hitpointtracer = new("LaserFindHitPointTracer");

		Super.PostBeginPlay();
	}

	void A_FireLaser(int damage, sound snd = "", double zoffset = 0, bool drawdecal = false, double alpha = 1.0, double volume = 1.0)
	{
		if (snd != "")
		{
			A_PlaySound(snd, CHAN_6 | CHAN_NOSTOP, 1.0, false);
			A_SoundVolume(CHAN_6, volume);
		}
		DoTrace(self, angle, 2048, pitch, 0, zoffset, hitpointtracer);
		beam = Laser.DrawLaser(self, beam, hitpointtracer.Results, "LaserBeam", "LaserPuff", damage, zoffset, drawdecal, alpha);
	}

	action void DoTrace(Actor origin, double angle, double dist, double pitch, int flags, double zoffset, LaserFindHitPointTracer thistracer)
	{
		if (!thistracer) { return; }
		if (!origin) { origin = self; }

		thistracer.skipspecies = origin.species;
		thistracer.skipactor = origin;

		Vector3 tracedir = (cos(angle) * cos(pitch), sin(angle) * cos(pitch), -sin(pitch));
		thistracer.Trace(origin.pos + (0, 0, zoffset), origin.CurSector, tracedir, dist, 0);
	}
}

Class LaserFindHitPointTracer : LineTracer
{
	Name skipspecies;
	Actor skipactor;

	override ETraceStatus TraceCallback()
	{
		if (Results.HitType == TRACE_HitActor)
		{
			if (
				Results.HitActor != skipactor && // Skip the origin
				(skipactor != Results.HitActor.master) && // And the master
				(!Results.HitActor.master || Results.HitActor.master != skipactor) && // And any children
				Results.HitActor.species != skipspecies && // And any of the skipped species
				(Results.HitActor.bSolid || Results.HitActor.bShootable || Results.HitActor is "PlayerPawn") // And only return shootable actors
			) { return TRACE_Stop; } 

			Results.HitActor = null;

			return TRACE_Skip;
		}
		else if (Results.HitType == TRACE_HitFloor || Results.HitType == TRACE_HitCeiling)
		{
			return TRACE_Stop;
		}
		else if (Results.HitType == TRACE_HitWall)
		{
			if (Results.HitLine.flags & (Line.ML_BLOCKING | Line.ML_BLOCKEVERYTHING && Results.HitLine.alpha == 1.0)) { return TRACE_Stop; }
			return TRACE_Skip;
		}

		return TRACE_Stop;
	}
}

class LaserBeam : Actor
{
	Default
	{
		+NOGRAVITY
		+NOINTERACTION
		+NOBLOCKMAP
		+BRIGHT
		Radius 0;
		Height 0;
		RenderStyle "Add";
		RenderRadius 2048.0;
		Alpha 0.35;
	}

	States
	{
		Spawn:
			MDLA A 1;
			Loop;
	}

	override void Tick()
	{
		if (!master) { Destroy(); }

		Super.Tick();
	}
}

class LaserPuff : Actor
{
	Default
	{
		+NOGRAVITY
		+NOINTERACTION
		+NOBLOCKMAP
		+INVISIBLE
		Radius 0;
		Height 0;
	}

	States
	{
		Spawn:
			AMRK A 5 {
				A_SpawnItemEx("SparkFlare_Y1", 0, 0, 40);
			}
			AMRK A 2 {
				// Spawn random spark
		 		A_SpawnProjectile(String.Format("Spark_%c%i", RandomPick("W", "Y"), Random(1, 16)), 0, 0, 0, CMF_AIMDIRECTION | CMF_BADPITCH, Random(157,203));
			}
			Stop;
	}
}

class Laser : Actor
{
	static LaserBeam DrawLaser(Actor origin, LaserBeam beam, TraceResults traceresults, Class<Actor> spawnclass = "LaserBeam", Class<Actor> puffclass = "LaserPuff", int damage = 0, double zoffset = 0, bool drawdecal = true, double alpha = 1.0)
	{
		if (!traceresults) { return beam; }
		if (!origin) { return beam; }

		Vector3 beamoffset = origin.pos + (0, 0, zoffset);
		double dist  = (beamoffset - traceresults.HitPos).length();

		//Laser beam
		Vector3 beampos = beamoffset + traceresults.HitVector * (dist / 2);
		if (!beam)
		{
			beam = LaserBeam(Spawn(spawnclass, beampos, ALLOW_REPLACE));
			if (beam)
			{
				beam.master = origin;
				beam.target = origin;
			}
		}

		if (beam)
		{
			beam.SetOrigin(beampos, true);

			beam.pitch = origin.pitch - 90;
			beam.angle = origin.angle;
			beam.scale.x = FRandom(0.5, 0.75);
			beam.scale.y = dist * 2.225;
			beam.alpha = beam.Default.alpha * alpha;
		}

		Actor flash = Spawn("SparkFlare_R" .. Random(1, 6), traceresults.HitPos, ALLOW_REPLACE);
		if (flash)
		{
			flash.scale *= 0.15;
			flash.alpha = max(0.25, 0.6 * alpha);
		}

		Actor puff;

		if (traceresults.HitActor)
		{
			traceresults.HitActor.DamageMobj(beam, origin, damage, "Laser");
			if (drawdecal && !traceresults.HitActor.bNoBlood)
			{
				puff = Spawn("BodySmoke", traceresults.HitPos, ALLOW_REPLACE);
				if (puff)
				{
					puff.scale *= 0.25;
					puff.angle = puff.AngleTo(origin);
				}
			}
		}
		else if (traceresults.HitType == TRACE_HitFloor || traceresults.HitType == TRACE_HitCeiling || traceresults.HitType == TRACE_HitWall)
		{
			// Spawn bullet puff
			if (puffclass != "" && drawdecal)
			{
				puff = Spawn(puffclass, traceresults.HitPos - traceresults.HitVector * 3.0, ALLOW_REPLACE);

				if (puff)
				{
						puff.angle = origin.AngleTo(puff);
						puff.A_SprayDecal("LaserBeamScorch", 24.0);
						puff.angle = puff.AngleTo(origin);
				}
			}
		}

		return beam;
	}
}