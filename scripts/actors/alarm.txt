class Alarm : Base
{
	bool active;
	int looptime;

	Default
	{
		+WALLSPRITE
		+ROLLSPRITE
		+NOGRAVITY
		-SOLID
		Height 16;
		Radius 8;
	}
	States
	{
		Spawn:
			ALRM A 0;
		Silence:
			ALRM A 0 A_SetPeerState(false);
		Inactive:
			ALRM A 35 A_CheckAlarm();
			Loop;
		Alert:
			ALRM A 0 A_SetPeerState();
		Active:
			ALRM ABABABABABABABABABABABABABABABABABAB 1; // Delay 34 tics before checking again.
			ALRM A 0 A_CheckAlarm();
			Loop;
	}

	void A_SetPeerState(bool makeactive = true)
	{
		if (tid)
		{
			let it = ActorIterator.Create(tid, "Actor");
			Actor mo;

			while (mo = Actor(it.Next()))
			{
				DoActivation(mo, makeactive);
			}

			DoActivation(self, makeactive);
		}
		else
		{
			let it = ThinkerIterator.Create("Alarm");
			Alarm mo;

			while (mo = Alarm(it.Next()))
			{
				DoActivation(mo, makeactive);
			}
		}
	}

	void DoActivation(Actor mo, bool makeactive)
	{
		if (!makeactive)
		{
			mo.target = null;
			mo.SoundAlert(NULL, false);
			mo.SetStateLabel("Inactive");
		}
		else
		{
			if (LastHeard && LastHeard is "PlayerPawn") { target = LastHeard; }
			if (!target) { target = FindClosestPlayer(360); }
			mo.target = target;
			mo.SoundAlert(target, false, 512);
			mo.SetStateLabel("Active");
		}
	}

	void A_CheckAlarm()
	{
		A_LookEx(LOF_NOJUMP | LOF_NOSEESOUND, 0, 1024, 1024, 360);

		if (active)
		{
			if (AlertedSneakablesCount() <= 0)
			{
				active = false;
				SetStateLabel("Silence");
			}
		}
		else
		{
			if (AlertedSneakablesCount() > 0)
			{
				active = true;
				SetStateLabel("Alert");
			}
		}
	}

	override void Tick()
	{
		Super.Tick();

		if (active && looptime-- <= 0)
		{
			A_PlaySound("alarm_ring", CHAN_AUTO);
			looptime = 70; // Duration of alarm loop sound in tics
		}	
	}
}

class AlarmSpawner : Base
{
	Array<Actor> Guards;
	int guardcount;

	Default
	{
	}

	States
	{
		Spawn:
			UNKN A 1;
		Inactive:
			EXCL B 35;
			Loop;
		Active:
			EXCL A 35 A_SetTics(Random[Spawn](1, 3) * 35);
		Active.Spawn:
			EXCL C 1 {
				guardcount = 0;

				for (int i = 0; i < Guards.Size(); i++) {
					Actor mo = Guards[i];

					if (mo) {
						if (!mo.bShootable || mo.health <= 0) {
							Guards.Delete(i);
							Guards.ShrinkToFit();
						} else {
							guardcount++;
						}
					}
				}
			}
			UNKN A 1 {
				if (guardcount < 3) {
					vector3 location = pos;

					if (guardcount == 1) { location += (-24, 24, 0); }
					else if (guardcount == 2) { location += (-24, -24, 0); }

					//Spawn enemies if not visible to player
					if (!InPlayerSight()) {
						Actor guard = Spawn("SneakableSSMP40Guard", location);
						guard.target = target;
						guard.angle = angle;
						Nazi(guard).BecomeAlerted();
						Guards.Push(guard);
					}
					return ResolveState("Active");
				}
				return ResolveState("Inactive");
			}
	}
}