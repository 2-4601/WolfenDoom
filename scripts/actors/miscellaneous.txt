class InvisibleBridgeBlocking : InvisibleBridge replaces InvisibleBridge
{
	Default
	{
		+DONTTHRUST
		+NOBLOOD
		+NODAMAGE
		+NOTAUTOAIMED
		+SHOOTABLE
	}
}

class ModelOpelTruckWindows : Actor
{
	Default
	{	+NOINTERACTION
		Height 56;
		DistanceCheck "scenelod";
		RenderStyle "Shaded";
		StencilColor "CC CC CC";
	}

	States
	{
		Spawn:
			MDLA A -1;
			Stop;
	}

	override void BeginPlay()
	{
		// STATNUM values set the order in which an actor is Ticked by the game loop.
		//  This change causes this actor to Tick *after* the pathfollower moves and
		//  the rail script has adjusted the truck model, instead of before the
		//  script runs, as would be the default behavior.
		ChangeStatNum(STAT_SCRIPTS + 1);
	}

	override void Tick()
	{
		if (master)
		{
			A_Warp(AAPTR_MASTER, flags:WARPF_COPYPITCH | WARPF_COPYINTERPOLATION | WARPF_NOCHECKPOSITION);
		}
		Super.Tick();
	}
}

class CrankModel : Actor
{
	int init, amt;

	Default
	{
		+NOGRAVITY
		Height 0;
		Radius 0;
	}

	States
	{
		Spawn:
			MDLA A 35;
		SpawnLoop:
			MDLA B 1 A_DoCrank();
			Loop;
	}

	void A_DoCrank()
	{
		if (!init) { init = amt; }
		roll = amt - init;
	}
}

class TextPaper : Actor
{
	int displaytime;

	Default
	{
		//$Category Props (Wolf3D)/Bureau
		//$Title Textpaper (usable)
		//$Color 3
		Radius 16;
		Height 32;
		Scale 0.25;
		RenderStyle 'Translucent';
		-SOLID
		+FLATSPRITE
		+NOGRAVITY
	}

	States
	{
		Spawn:
			TEXT A -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		frame = args[3];

		Super.PostBeginPlay();
	}

	override bool Used(Actor user)
	{
		if (special == 80)
		{
			if (displaytime < level.time) { Level.ExecuteSpecial(special, user, null, false, args[0], args[1], args[2], args[3], args[4]); } // Only run this when first pressed

			displaytime = level.time + 1;
			user.player.usedown = false; // Set the internal logic to think that use was not held down so that this code block will be called again
			return true; // Return true so that the usefail sound doesn't play over and over and over again
		}

		return false;
	}

	override void Tick()
	{
		if (displaytime > level.time)
		{
			alpha = max(alpha - 0.06, 0);
		}
		else
		{
			alpha = min(alpha + 0.02, 1.0);
		}

		Super.Tick();
	}
}