class InvisibleBridgeBlocking : InvisibleBridge replaces InvisibleBridge
{
	Default
	{
		+DONTTHRUST
		+NOBLOOD
		+NODAMAGE
		+NOTAUTOAIMED
		+SHOOTABLE
	}
}

class ModelOpelTruckWindows : Actor
{
	Default
	{	+NOINTERACTION
		Height 56;
		DistanceCheck "scenelod";
		RenderStyle "Shaded";
		StencilColor "CC CC CC";
	}

	States
	{
		Spawn:
			MDLA A -1;
			Stop;
	}

	override void BeginPlay()
	{
		// STATNUM values set the order in which an actor is Ticked by the game loop.
		//  This change causes this actor to Tick *after* the pathfollower moves and
		//  the rail script has adjusted the truck model, instead of before the
		//  script runs, as would be the default behavior.
		ChangeStatNum(STAT_SCRIPTS + 1);
	}

	override void Tick()
	{
		if (master)
		{
			A_Warp(AAPTR_MASTER, flags:WARPF_COPYPITCH | WARPF_COPYINTERPOLATION | WARPF_NOCHECKPOSITION);
		}
		Super.Tick();
	}
}

class CrankModel : Actor
{
	int init, amt;

	Default
	{
		+NOGRAVITY
		Height 0;
		Radius 0;
	}

	States
	{
		Spawn:
			MDLA A 35;
		SpawnLoop:
			MDLA B 1 A_DoCrank();
			Loop;
	}

	void A_DoCrank()
	{
		if (!init) { init = amt; }
		roll = amt - init;
	}
}

class TextPaper : Actor
{
	int displaytime;

	Default
	{
		//$Category Props (Wolf3D)/Bureau
		//$Title Textpaper (usable)
		//$Color 3

		//$Arg0 "Text ID"
		//$Arg0Tooltip "Predefined texts from the LANGUAGE lump, e.g. 2 is PAPERTEXT02"
		//$Arg0Default 0
		//$Arg1 "Paper style"
		//$Arg1Tooltip "Various paper styles:\n1. White empty paper\n2. Tan empty paper\n3. White with nazi head paper\n4. Tan with nazi head paper\n5. Old used paper"
		//$Arg1Default 1
		//$Arg2 "Font style"
		//$Arg2Tooltip "Various font styles:\n1. Typewriter clean\n2. Typewriter broken\n3. Occult glyphs\n4. Handwritten"
		//$Arg2Default 1

		Radius 16;
		Height 32;
		Scale 0.25;
		RenderStyle 'Translucent';
		-SOLID
		+FLATSPRITE
		+NOGRAVITY
	}

	States
	{
		Spawn:
			TEXT A -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		if (special == 80) { frame = args[3]; }
		else { frame = args[1]; }

		Super.PostBeginPlay();
	}

	override bool Used(Actor user)
	{
		if (special == 80 || (!special && args[0]))
		{
			if (displaytime < level.time) // Only run this when first pressed
			{
				if (special == 80) { Level.ExecuteSpecial(80, user, null, false, args[0], args[1], args[2], args[3], args[4]); } // Run it the old way if that's how it's set up (also allows setting other actions to run when you use the paper, still)
				else {  Level.ExecuteSpecial(80, user, null, false, -int(Name("TextPaper")), 0, args[0], args[1], args[2]); } // Otherwise pass the args as defined
			} 
			
			displaytime = level.time + 1;
			user.player.usedown = false; // Set the internal logic to think that use was not held down so that this code block will be called again
			return true; // Return true so that the usefail sound doesn't play over and over and over again
		}

		return false;
	}

	override void Tick()
	{
		if (displaytime > level.time)
		{
			alpha = max(alpha - 0.06, 0);
		}
		else
		{
			alpha = min(alpha + 0.02, 1.0);
		}

		Super.Tick();
	}
}

class US_ShermanCannon : Actor
{
	Default
	{
		+DONTSPLASH
		+FLOORCLIP
		+NOGRAVITY
	}

	States
	{
		Spawn:
			MDLA A -1;
			Stop;
	}
}

class US_ShermanTurret : Actor
{
	Actor gun;

	Default
	{
		Height 32;
		+CANPASS
		+DONTSPLASH
		+FLOORCLIP
		+NOGRAVITY
		+SOLID
	}

	States
	{
		Spawn:
			MDLA A -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		bool sp = false;

		while (!gun) { [sp, gun] = A_SpawnItemEx("US_ShermanCannon", 0, 0, 0, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_TRANSFERSCALE); }

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (gun)
		{
			gun.angle = angle;
			gun.SetOrigin(self.pos + (RotateVector((32, 0), angle), 18.0), true);

			gun.bSolid = bSolid;
			gun.bInvisible = bInvisible;
		}
	}

	override void OnDestroy()
	{
		if (gun) { gun.Destroy(); }
	}
}

class US_Sherman : Actor
{
	Actor turret;

	Default
	{
		//$Category Models (Wolf3D)/Vehicles
		//$Title Driveable US M4 Sherman Tank
		//$Color 3
		DistanceCheck "scenelod";
		Radius 64;
		Height 64;
		Mass 0x7ffffff;
		+SOLID
		+CANPASS
	}

	States
	{
		Spawn:
			MDLA A -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		bool sp = false;

		while (!turret) { [sp, turret] = A_SpawnItemEx("US_ShermanTurret", 16.5 * sin(angle), 16.5 * cos(angle), Height, 0, 0, 0, 0, SXF_TRANSFERPITCH | SXF_TRANSFERROLL | SXF_TRANSFERSCALE); }

		Super.PostBeginPlay();
	}

	override bool Used(Actor user)
	{
		if (bDormant) { return false; }

		let p = user.player;

		if (p)
		{
			bSolid = False;
			bInvisible = True;

			if (turret)
			{
				turret.bSolid = False;
				turret.bInvisible = true;
			}

			p.mo.SetOrigin(pos, false);
			p.mo.angle = angle;

			user.GiveInventory("Sherman", 1);
			return true;
		}
		return false;
	}
}

class Nothing : Actor
{
	Default
	{
		+NOBLOCKMAP
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Stop;
	}
}

class Sherman : PowerMorph
{
	Default
	{
		PowerMorph.MorphStyle MRF_LOSEACTUALWEAPON;
		PowerMorph.MorphFlash "Nothing"; // Why isn't there an option to NOT spawn fog at all?
		PowerMorph.UnMorphFlash "Nothing";
		PowerMorph.PlayerClass "ShermanPlayer";
		Powerup.Duration 0x7FFFFFFF;
	}

	override void EndEffect()
	{
		if (MorphedPlayer)
		{
			let tank = ShermanPlayer(MorphedPlayer.mo);

			if (tank)
			{
				if  (tank.treads) { tank.treads.Destroy(); }
				if  (tank.turret) { tank.turret.Destroy(); }
				if  (tank.turretcamera) { tank.turretcamera.Destroy(); }
			}
		}

		Super.EndEffect();
	}
}