class InvisibleBridgeBlocking : InvisibleBridge replaces InvisibleBridge
{
	Default
	{
		+DONTTHRUST
		+NOBLOOD
		+NODAMAGE
		+NOTAUTOAIMED
		+SHOOTABLE
	}
}

class ModelOpelTruckWindows : Actor
{
	Default
	{
		+NOINTERACTION
		Height 56;
		DistanceCheck "scenelod";	
		RenderStyle "Shaded";
		StencilColor "CC CC CC";
	}

	States
	{
		Spawn:
			MDLA A -1;
			Stop;
	}

	override void BeginPlay()
	{
		// STATNUM values set the order in which an actor is Ticked by the game loop.
		//  This change causes this actor to Tick *after* the pathfollower moves and
		//  the rail script has adjusted the truck model, instead of before the
		//  script runs, as would be the default behavior.
		ChangeStatNum(STAT_SCRIPTS + 1);
	}

	override void Tick()
	{
		if (master)
		{
			A_Warp(AAPTR_MASTER, flags:WARPF_COPYPITCH | WARPF_COPYINTERPOLATION | WARPF_NOCHECKPOSITION);
		}
		Super.Tick();
	}
}

class CrankModel : Actor
{
	int init, amt;

	Default
	{
		+NOGRAVITY
		Height 0;
		Radius 0;
	}

	States
	{
		Spawn:
			MDLA A 35;
		SpawnLoop:
			MDLA B 1 A_DoCrank();
			Loop;
	}

	void A_DoCrank()
	{
		if (!init) { init = amt; }
		roll = amt - init;
	}
}

class TextPaper : Actor
{
	int displaytime;
	bool viewed;

	Default
	{
		//$Category Props (BoA)/Bureau
		//$Title Textpaper (usable)
		//$Color 3

		//$Arg0 "Text ID"
		//$Arg0Tooltip "Predefined texts from the LANGUAGE lump, e.g. 2 is PAPERTEXT02"
		//$Arg0Default 0
		//$Arg1 "Paper style"
		//$Arg1Tooltip "Various paper styles:\n1. White empty paper\n2. Tan empty paper\n3. White with nazi head paper\n4. Tan with nazi head paper\n5. Old used paper"
		//$Arg1Type 11
		//$Arg1Enum { 1 = "White Paper"; 2 = "Tan Paper"; 3 = "White Paper with Nazi Letterhead"; 4 = "Tan Paper with Nazi Letterhead"; 5 = "Old Dirty Paper"; }
		//$Arg1Default 1
		//$Arg2 "Font style"
		//$Arg2Tooltip "Various font styles:\n1. Book/press type\n2. Typewriter broken\n3. Occult glyphs\n4. Handwritten 1\n5. Handwritten 2\n6. Handwritten 3"
		//$Arg2Type 11
		//$Arg2Enum { 1 = "Set Type (Book print)"; 2 = "Worn Typewriter"; 3 = "Occult Runes"; 4 = "Handwriting 1 (Messy)"; 5 = "Handwriting 2 (Neat)"; 6 = "Handwriting 3 (Neat, small)"; }
		//$Arg2Default 2

		Radius 16;
		Height 32;
		Scale 0.25;
		RenderStyle 'Translucent';
		-SOLID
		+FLATSPRITE
		+NOGRAVITY
	}

	States
	{
		Spawn:
			TEXT A -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		if (special == 80) { frame = args[3]; }
		else { frame = args[1]; }

		Super.PostBeginPlay();
	}

	override bool Used(Actor user)
	{
		viewed = 0;

		if (special == 80 || (!special && args[0]))
		{
			if (displaytime < level.time) // Only run this when first pressed
			{
				if (special == 80)
				{
					Level.ExecuteSpecial(80, user, null, false, args[0], args[1], args[2], args[3], args[4]); // Run it the old way if that's how it's set up (also allows setting other actions to run when you use the paper, still)

					displaytime = level.time + 1;
					user.player.usedown = false; // Set the internal logic to think that use was not held down so that this code block will be called again
				}
				else
				{
					viewed = Level.ExecuteSpecial(80, user, null, false, -int(Name("TextPaper")), 0, args[0], args[1], args[2]); // Otherwise pass the args as defined

					if (viewed) { displaytime = level.time + 35; }
					else { displaytime = level.time; }
				}
			} 
			
			return true; // Return true so that the usefail sound doesn't play over and over and over again
		}

		return false;
	}

	override void Tick()
	{
		if (displaytime > level.time)
		{
			alpha = max(alpha - 0.06, 0);
		}
		else if (!viewed)
		{
			alpha = min(alpha + 0.02, 1.0);
		}

		Super.Tick();
	}
}

class FlattenableProp : Actor // Tall grass/rye, etc. that can be trampled down
{
	int touchtime;
	int fallpitch;

	Default
	{
		+NOBLOOD
		+NODAMAGE
		+NOTAUTOAIMED
		+SHOOTABLE
		+SOLID
		+SPECIAL
	}

	override void PostBeginPlay()
	{
		A_SetSize(Radius, 1);

		Super.PostBeginPlay();
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		Touch(inflictor);

		return 0; // No actual damage to the actor
	}

	override void Touch(Actor toucher)
	{
		if (!toucher) { return; }

		touchtime++;
		bFlatSprite = true;

		if (touchtime < 5) { angle = AngleTo(toucher) + 180; }
		if (!fallpitch) { fallpitch = Random(70, 85); }

		pitch = clamp(-fallpitch + touchtime * 15, -fallpitch, 0);

		if (pitch == -fallpitch)
		{
			bSpecial = false;
			bSolid = false;
			bShootable = false;
		}
	}
}

class ActorPositionable : Actor
{
	enum RotationFlags
	{
		ROT_MatchAngle = 1,
		ROT_MatchPitch = 2,
		ROT_MatchRoll = 4,
	};

	Vector3 spawnoffset;
	Vector3 offset;

	override void PostBeginPlay()
	{
		if (!master) { Destroy(); return; }

		spawnoffset = pos - master.pos;

		Vector2 temp = RotateVector((spawnoffset.x, spawnoffset.y), -master.angle);
		spawnoffset = (temp.x, temp.y, spawnoffset.z);

		Species = master.Species;

		Super.PostBeginPlay();
	}

	void RotateWithMaster(int flags = ROT_MatchAngle | ROT_MatchPitch | ROT_MatchRoll)
	{
		Vector2 temp;

		// Keep the actor in the correct position, regardless of pitch/roll of the master actor
		if (master)
		{
			if (spawnoffset != (0, 0, 0))
			{
				temp = RotateVector((spawnoffset.y, spawnoffset.z), master.roll);
				offset = (spawnoffset.x, temp.x, temp.y);

				temp = RotateVector((offset.x, offset.z), 360 - master.pitch);
				offset = (temp.x, offset.y, temp.y);

				temp = RotateVector((offset.x, offset.y), master.angle);
				offset = (temp.x, temp.y, offset.z);
			}

			SetOrigin(master.pos + offset, true);

			if (flags & ROT_MatchAngle) { angle = master.angle; }

			double delta = deltaangle(master.angle, angle);

			if (flags & ROT_MatchPitch) { pitch = master.roll * sin(-delta) + master.pitch * cos(delta); }
			if (flags & ROT_MatchRoll) { roll = master.roll * cos(-delta) + master.pitch * sin(delta); }
		}
	}

	override void Tick()
	{
		RotateWithMaster();

		Super.Tick();
	}
}

class HeatEffectGiver : SwitchableDecoration
{
	bool Active;
	Array<Actor> Activators;

	Default
	{
		//$Category Special Effects (BoA)
		//$Color 12
		Radius 128;
		Scale 4.0;
		+FLATSPRITE
		+SPECIAL
		+NOCLIP
		RenderStyle "None";
	}

	States
	{
		Spawn:
			PAO1 A 35;
			Loop;
	}

	override void PostBeginPlay()
	{
		double fz = GetZAt(0, 0, 0, GZF_NO3DFLOOR);
		double cz = GetZAt(0, 0, 0, GZF_CEILING | GZF_NO3DFLOOR);

		SetOrigin((pos.xy, fz), false);

		A_SetSize(Radius * scale.x + 32, cz - fz); // Resize to the scaled size, plus 32 units to allow for a border on the edges where the value will properly be zero, and fill the height of the sector.

		Active = !(SpawnFlags & MTF_DORMANT);

		Activators.Clear();

		Super.PostBeginPlay();
	}

	override void Touch(Actor toucher)
	{
		if (Activators.Find(toucher) == Activators.Size()) { Activators.Push(toucher); }
	}

	override void Tick()
	{
		if (Active && level.time % 5 == 0)
		{
			for (int i = 0; i < Activators.Size(); i++)
			{
				Actor mo = Activators[i];

				if (mo && mo is "PlayerPawn")
				{
					double r = Default.Radius * scale.x / Default.scale.x;

					int amt = clamp(int((128 / r) * (r - Distance2D(mo) + mo.Radius)), 0, 128); // Always scale from 0 to 128, regardless of scale/radius of actor

					Inventory control = mo.FindInventory("HeatShaderControl");
					if (control) { amt = max(amt, control.amount); } // Don't cancel out other givers

					mo.SetInventory("HeatShaderControl", 1 + amt);

					if (amt <= 1) { Activators.Delete(i); }
				}
			}
		}

		Super.Tick();
	}

	override void Activate (Actor activator)
	{
		Active = true;
		Super.Activate(activator);
	}

	override void Deactivate (Actor activator)
	{
		Active = false;
		Super.Deactivate(activator);
	}
}

class Tornado : Actor
{
	class<Actor> segment;
	int skinframe;
	class<Actor> lightning;
	class<Actor> dust;

	Property Segment:segment;
	Property SegmentSkin:skinframe;
	Property Lightning:lightning;
	Property Dust:dust;

	Default
	{
		//$Category Special Effects (BoA)
		//$Color 12
		+NOINTERACTION

		Scale 3.5;
		Speed 1.0;
		Alpha 1.0;

		Tornado.Segment "TornadoSegment";
		Tornado.SegmentSkin 0; // 0-4 uses the various waterfall textures as the model skin
		Tornado.Lightning "LightningBeamArc2";
		Tornado.Dust "ZyklonBCloud";
	}

	override void PostBeginPlay()
	{
		double factor = (ceilingz - floorz) / 896.;

		scale *= factor;

		Actor prev;
		double spawnscale = scale.x;
		double spawnspeed = speed;

		for (double i = ceilingz; i >= floorz; i -= 48 * factor)
		{
			Actor mo = Spawn(segment, (pos.xy, i));

			if (mo)
			{
				TornadoSegment(mo).destscale = spawnscale;
				TornadoSegment(mo).skinframe = skinframe;
				TornadoSegment(mo).dust = dust;
				TornadoSegment(mo).lightning = lightning;
				mo.bBright = bBright;
				mo.alpha = alpha;
				mo.speed = spawnspeed;
				mo.scale.y = factor;
				if (prev) { prev.master = mo; }

				prev = mo;
			}

			spawnscale *= 0.85;
			spawnspeed *= 1.2;
		}

		Destroy();
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
	}
}

class TornadoSegment : Actor
{
	Vector3 offset;
	double destscale;
	int timeoffset;
	class<Actor> lightning;
	class<Actor> dust;
	int skinframe;

	Default
	{
		+NOINTERACTION
		+NOGRAVITY

		Renderstyle "Add";
		Scale 0.05;
	}

	States
	{
		Spawn:
			MDLA # 0;
			MDLA # 70;
		Disperse:
			MDLA # 5 {
				A_FadeOut(0.025);
				scale.x *= 1.0125;
			}
			Loop;
	}

	override void PostBeginPlay()
	{
		angle = Random(0, 359);
		timeoffset = Random(1, 360);
		frame = skinframe;
		SpawnPoint = pos;

		if (master)
		{
			offset = pos - master.pos;
		}

		A_PlaySound("WIND_SILENT", CHAN_6, 1.0, true, ATTN_NONE);

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (isFrozen()) { return; }

		angle += speed;
		roll = 5 * sin((level.time + timeoffset) * 2) * scale.y;

		if (master)
		{
			if (scale.x < destscale)
			{
				scale.x = min(destscale, scale.x * 1.05);
				master.scale.x = scale.x * 0.85;

				master.alpha = min(alpha, scale.x / destscale);
			}

			Vector3 offsetalt = offset;

			offsetalt.x += 16 * scale.x * sin(level.time);
			offsetalt.y += 16 * scale.x * cos(level.time);
			SetOrigin(master.pos + offsetalt, true);
		}

		int radius = int(64 * scale.x);

		if (level && level.time && level.time % (timeoffset * 5) == 0)
		{
			if (dust)
			{
				Actor cloud = Spawn(dust, (SpawnPoint.xy + (Random(-radius, radius), Random(-radius, radius)), floorz));
				if (cloud) { cloud.scale *= FRandom(0.5, 1.2); }
			}

			if (lightning)
			{
				Actor l = Spawn(lightning, pos + (Random(-radius, radius), Random(-radius, radius), 0));
				if (l)
				{
					l.master = self;
					l.angle = Random(0, 359);
					l.pitch = Random(0, 359);
					LightningBeam(l).maxdistance = 256 * scale.x;
				}
			}
		}

		A_SoundVolume(CHAN_6, alpha * 0.75);

		Super.Tick();
	}
}

class ExplosionLight : AlertPointLight
{
	override void Tick()
	{
		Super.Tick();

		if (master)
		{
			args[DynamicLight.LIGHT_INTENSITY] = int(master.scale.x * 2048 * master.alpha);
		}
		else
		{
			args[DynamicLight.LIGHT_INTENSITY]--;
		}

		if (args[DynamicLight.LIGHT_INTENSITY] <= 0) { Destroy(); }
	}
}

class ExplosionSphere : Actor
{
	Actor light;
	Array<Actor> sparks;

	Default
	{
		+NOGRAVITY
		+BRIGHT
		RenderStyle "AddStencil";
		StencilColor "BBBBFF";
		Scale 0.01;
		Alpha 0.7;
	}

	States
	{
		Spawn:
			MDLA A 1;
			Loop;
	}

	override void PostBeginPlay()
	{
		light = Spawn("ExplosionLight", pos);
		light.args[DynamicLight.LIGHT_RED] = 0xBB;
		light.args[DynamicLight.LIGHT_GREEN] = 0xBB;
		light.args[DynamicLight.LIGHT_BLUE] = 0xFF;
		light.master = self;

		for (int i = 1; i <= 6; i++)
		{
			Class<Actor> sparkclass = "SparkFlare_W" .. i;

			Actor spark;

			for (int j = 0; j < 32; j++)
			{
				spark = Spawn(sparkclass, pos);

				if (spark)
				{
					spark.A_SetRenderStyle(alpha, STYLE_AddShaded);
					spark.SetShade(fillcolor);
					spark.bMissile = true;
					spark.A_SetTics(Random(30, 280));
					spark.scale *= FRandom(0.125, 0.5);
					spark.alpha *= FRandom(0.25, 1.0);
					spark.speed = FRandom(1, 32);
					spark.angle = FRandom(0, 359);
					spark.pitch = FRandom(-30, 0);

					spark.Vel3DFromAngle(spark.speed, spark.angle, spark.pitch);

					sparks.push(spark);
				}
			}
		}
	}

	override void Tick()
	{
		if (IsFrozen()) { return; }

		scale.x = scale.y = (scale.x + 0.2);
		alpha = max(0, alpha - 0.05);

		for (int s = 0; s < sparks.Size(); s++)
		{
			if (!sparks[s]) { sparks.Delete(s); continue; }

			sparks[s].angle += 2;
			sparks[s].pitch -= 0.5;

			sparks[s].Vel3DFromAngle(sparks[s].speed, sparks[s].angle, sparks[s].pitch);
		}

		if (light && alpha == 0.0) { light.master = null; }

		if (!sparks.Size())
		{
			Destroy();
		}

		Super.Tick();
	}
}

class ExplosionCore : Actor
{
	Default
	{
		+NOGRAVITY
		+BRIGHT
		RenderStyle "AddStencil";
		StencilColor "005500";

		Alpha 0.0;
		Scale 10.0;
	}

	States
	{
		Spawn:
			MDLA A 1;
			Loop;
	}

	override void Tick()
	{
		if (IsFrozen()) { return; }

		scale.x = scale.y = (scale.x - 0.4);
		alpha = min(0.7, alpha + 0.005);

		if (scale.x <= 0.0)
		{
			Spawn("ExplosionSphere", pos);
			Destroy();
		}

		Super.Tick();
	}
}

class StaticActor : Actor
{
	bool nostatic;

	Property NoStatic:nostatic;

	Default
	{
		StaticActor.NoStatic false;
	}

	override void Tick()
	{
		Super.Tick();

		// If the actor stops animating (tics of -1) and isn't shootable or alive and moving, then stop ticking the actor.
		if (
			!nostatic &&
			tics == -1 && 
			(
				!bShootable ||
				health <= 0
			) && 
			vel == (0, 0, 0) &&
			(
				bNoGravity ||
				pos.z == floorz
			)
		)
		{
			ChangeStatNum(STAT_STATIC);
		}
	}
}

class Bubble : Actor
{
	int ticker;

	Default
	{
		Radius 2;
		Height 2;
		Speed 1;
		Scale 0.05;
		Alpha 0.25;
		RenderStyle "Add";
		Projectile;
		+CLIENTSIDEONLY
		+FORCEXYBILLBOARD
		+NOBLOCKMAP
		+NOCLIP
	}

	States
	{
		Spawn:
			SBUB A 1;
			Loop;
	}

	override void Tick()
	{
		if (!waterlevel) { Destroy(); }
		else if (pos.z + height == ceilingz)
		{
			ticker++;

			if (ticker > 70)
			{
				alpha -= 0.01;
				if (alpha <= 0) { Destroy(); }
			}
		}

		if (Random() < 32)
		{
			angle = Random(0, 360);
			vel.xy = RotateVector((-0.1, 0), angle);
		}

		Super.Tick();
	}
}

class AscherParachuting : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FLOATBOB;
		FloatBobStrength 0.25;
		Scale 0.5;
	}

	States
	{
		Spawn:
			ASCP A -1;
			Stop;
	}
}