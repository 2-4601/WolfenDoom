class BulletTracer : FastProjectile
{
	Class<TracerTrail> trail;

	Property Trail:trail;

	Default
	{
		+BLOODSPLATTER
		+NOEXTREMEDEATH
		+WINDTHRUST
		+THRUGHOST
		Radius 2;
		Height 2;
		Speed 75;
		Decal "BulletChip";
		BulletTracer.Trail "TracerTrail";
	}

	States
	{
		Spawn:
			TNT1 A 1 BRIGHT;
			Loop;
		Death:
		Crash:
			TNT1 AAA 0 {
				A_SpawnItemEx("TracerSpark", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2), random(0,359)); //T667 improvements
				bWindThrust = false;
			}
			PUFF B 3 BRIGHT LIGHT("BPUFF1") A_PlaySound("ricochet");
			PUFF CD 3 BRIGHT LIGHT("BPUFF1");
			Stop;
		XDeath:
			TNT1 A 1 {
				bWindThrust = false;
				A_PlaySound("hitflesh");
			}
			Stop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		// Spawn the visible tracer *once* at spawn
		A_SpawnItemEx(trail, 0, 0, 0, vel.x, vel.y, vel.z, 0, SXF_ABSOLUTEVELOCITY | SXF_SETMASTER); //mxd
	}

	// Handling so that tracers won't hit actors that have the tracer's origin actor set as their master (or inherit from one that does)
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (target && other)
		{
			Actor roottarget = target;
			Actor rootmaster = other;
			while (roottarget.master) { roottarget = roottarget.master; }
			while (rootmaster.master) { rootmaster = rootmaster.master; }

			if (roottarget && roottarget == rootmaster) { return false; }
		}

		return true;
	}

	override void Tick()
	{
		DoWhizChecks();

		Super.Tick();
	}

	void DoWhizChecks(int radius = 96)
	{
		BlockThingsIterator it = BlockThingsIterator.Create(self, radius);

		while (it.Next())
		{
			if (it.thing == target) { continue; } // Ignore the originator

			if (it.thing.health > 0 && it.thing.bShootable && (Nazi(it.thing) || PlayerPawn(it.thing) || PlayerFollower(it.thing)))// Only affect living Nazis, players, and player followers
			{
				double dist = Distance3d(it.thing);

				if (dist > radius) { continue; }

				if (it.thing.lastHeard != self)
				{
					it.thing.lastHeard = self;

					if (target && target.IsHostile(it.thing)) // Only 'whizz' at hostiles
					{
						Actor mo = Spawn("Whizzer", pos);
						if (mo) { mo.master = it.thing; }
					}
				}
			}
		}
	}
}

class Whizzer : GrenadeBase
{
	Default
	{
		+NOGRAVITY
		GrenadeBase.FearDistance 32;
	}

	States
	{
		Spawn:
			TNT1 A 15;
			Stop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (master && PlayerPawn(master)) { A_PlaySound("whiz"); } // Only play whiz sound if near a player that's not the originator
	}
}

class TracerTrail : Actor
{
	double faderate, stepalpha, startalpha;

	Property FadeRate:faderate;
	Property StartAlpha:startalpha;

	Default
	{
		+BRIGHT
		+CANNOTPUSH
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+MISSILE //mxd
		+NOBLOCKMAP
		+NOINTERACTION
		+NODAMAGETHRUST
		+NOGRAVITY
		+NOTELEPORT
		+WINDTHRUST
		Alpha 0.0;
		Scale 0.4;
		RenderStyle "Add";
		TracerTrail.FadeRate 0.01;
		TracerTrail.StartAlpha 0.75;
	}
	States
	{
		Spawn:
			PUFF A 1 DoFade();
			Loop;
	}

	override void Tick()
	{
		Super.Tick();

		if (!master || !vel.length()) { Destroy(); }
	}

	void DoFade()
	{
		if (stepalpha < startalpha)
		{ // Quickly fade in from nothing at the very beginning...  This hides situations where the tracer would spawn and flash right in front of the player for a tick.
			alpha += 0.25;
			if (alpha > startalpha) { alpha = startalpha; }

			stepalpha = alpha;
		}
		else if (faderate)
		{
			bNoInteraction  = false;
			A_FadeOut(faderate);
		} // Fade out to nothing at the specified rate
	}
}

class TracerSpark : Actor
{
	Default
	{
		+DONTSPLASH
		+FLOORCLIP
		+FORCEXYBILLBOARD
		+MISSILE
		+NOTELEPORT
		+WINDTHRUST
		Health 4;
		Radius 3;
		Height 6;
		Gravity .1;
		Speed .1;
		RenderStyle "Add";
		Scale .3;
		Mass 0;
		BounceType "Doom";
	}

	States
	{
		Spawn:
			PUFF A 1;
			"####" AEFGHI 2 BRIGHT A_SetTranslucent(.8,1);
			"####" J 1 BRIGHT A_SetTranslucent(.8,1);
			"####" K 1 BRIGHT A_SetTranslucent(.7,1);
			"####" K 1 BRIGHT A_SetTranslucent(.6,1);
			"####" K 1 BRIGHT A_SetTranslucent(.5,1);
			"####" K 1 BRIGHT A_SetTranslucent(.4,1);
			"####" K 1 BRIGHT A_SetTranslucent(.3,1);
			"####" K 1 BRIGHT A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
	}
}

class TracerSpark_Longlive : TracerSpark
{

	Default
	{
		+BRIGHT
		Gravity .2;
	}

	States
	{
		Spawn:
			PUFF A 0 NODELAY A_Jump(256, "Fade1", "Fade2", "Fade3", "Fade4");
			Loop;
		Fade1:
			"####" AEFGHI 5 A_SetTranslucent(.8,1);
			"####" J 2 A_SetTranslucent(.8,1);
			"####" K 2 A_SetTranslucent(.7,1);
			"####" K 2 A_SetTranslucent(.6,1);
			"####" K 2 A_SetTranslucent(.5,1);
			"####" K 2 A_SetTranslucent(.4,1);
			"####" K 2 A_SetTranslucent(.3,1);
			"####" K 2 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade2:
			"####" AEFGHI 6 A_SetTranslucent(.8,1);
			"####" J 3 A_SetTranslucent(.8,1);
			"####" K 3 A_SetTranslucent(.7,1);
			"####" K 3 A_SetTranslucent(.6,1);
			"####" K 3 A_SetTranslucent(.5,1);
			"####" K 3 A_SetTranslucent(.4,1);
			"####" K 3 A_SetTranslucent(.3,1);
			"####" K 3 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade3:
			"####" AEFGHI 4 A_SetTranslucent(.8,1);
			"####" J 4 A_SetTranslucent(.8,1);
			"####" K 4 A_SetTranslucent(.7,1);
			"####" K 4 A_SetTranslucent(.6,1);
			"####" K 4 A_SetTranslucent(.5,1);
			"####" K 4 A_SetTranslucent(.4,1);
			"####" K 4 A_SetTranslucent(.3,1);
			"####" K 4 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade4:
			"####" AEFGHI 7 A_SetTranslucent(.8,1);
			"####" J 2 A_SetTranslucent(.8,1);
			"####" K 2 A_SetTranslucent(.7,1);
			"####" K 2 A_SetTranslucent(.6,1);
			"####" K 2 A_SetTranslucent(.5,1);
			"####" K 2 A_SetTranslucent(.4,1);
			"####" K 2 A_SetTranslucent(.3,1);
			"####" K 2 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
	}
}

class PlayerTracer : BulletTracer
{
	Default
	{
		Species "PlayerFollower"; // By default, player bullets have PlayerFollower species
	}

	override void PostBeginPlay()
	{
		if (target && target is "PlayerFollower" && target.bFriendly) { // If the shooter is a friendly PlayerFollower...
			A_SetSpecies("Player");  // ...they can always shoot through players
			bThruSpecies = True;
		} else if (!multiplayer && skill < 2) { // Otherwise, if it's a regular player, not in coop (or dm, hypothetically), and at lowest two skills...
			bThruSpecies = True; // ...player shots go through PlayerFollower species, as defined in Default block
		}

		Super.PostBeginPlay();
	}
}

class KTurretTracer : PlayerTracer
{
	Default
	{
		Speed 200.0;
		BulletTracer.Trail "KTurretTrail";
	}

	override void PostBeginPlay()
	{
		SetDamage(Random(10, 30));

		Super.PostBeginPlay();
	}
}

class KTurretTrail : TracerTrail
{
	Default
	{
		Alpha 1.0; // Start out at full alpha
	}
}

class KTFlare : ActorPositionable
{
	Default
	{
		+NOGRAVITY
		+ROLLSPRITE
		+FORCEXYBILLBOARD
		Scale 0.25;
		Alpha 0.5;
		RenderStyle "Add";
	}

	States
	{
		Spawn:
			FLAR B 1 Bright Light("3dFlare") A_FadeOut(0.075);
			Loop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		roll += Random(0, 360);
	}

	override void Tick()
	{
		Actor.Tick();

		RotateWithMaster(ROT_MatchAngle);
	}
}