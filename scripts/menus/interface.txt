class BoAMenu : GenericMenu
{
	static void SetMenu(Actor caller, Name mnu, int param = 0)
	{
		if (players[consoleplayer].mo != caller) { return; }

		Menu.SetMenu(mnu, param);
	}
}

class CombinationSafe : BoAMenu
{
	TextureID spinner, spinnerfront, spinnerback, background;
	Vector2 location, size, bgsize, screendimensions;
	double scale, bgscale;
	int angle, destangle, dir, olddir, set, count;
	int keyactive;
	int combo[3], solution[3];
	int speed, steps;
	Safe s;
	bool attempted;

	override void Init(Menu parent)
	{
		Super.Init(parent);

		spinner = TexMan.CheckForTexture("DIAL", TexMan.Type_Any);
		spinnerfront = TexMan.CheckForTexture("DIAL_F", TexMan.Type_Any);
		spinnerback = TexMan.CheckForTexture("DIAL_B", TexMan.Type_Any);
		background = TexMan.CheckForTexture("SAFEBKG", TexMan.Type_Any);

		location = (427, 240);
		[location, screendimensions] = Screen.VirtualToRealCoords(location, (screen.GetWidth(), screen.GetHeight()), (640, 480));

		size = TexMan.GetScaledSize(spinner);
		bgsize = TexMan.GetScaledSize(background);
		scale = 0.4 * screen.GetHeight() / size.y;
		bgscale = scale * 1.75;

		s = Safe(players[consoleplayer].ConversationNPC);

		speed = 5;
		steps = 23;

		if (s && !s.special)
		{
			solution[0] = s.args[1];
			solution[1] = s.args[2];
			solution[2] = s.args[3];
		}

		DontDim = true;
	}

	override void Drawer()
	{
		if (solution[0] != 0 || solution[1] != 0 || solution[2] != 0)
		{
			if (background)
			{
				screen.DrawTexture(background, false, location.x - bgsize.x * bgscale / 9.2, location.y, DTA_DestWidth, int(bgsize.x * bgscale), DTA_DestHeight, int(bgsize.y * bgscale), DTA_CenterOffset, true);
			}

			if (spinnerback)
			{
				screen.DrawTexture(spinnerback, false, location.x, location.y, DTA_DestWidth, int(size.x * scale), DTA_DestHeight, int(size.y * scale), DTA_CenterOffset, true);
			}

			if (spinner)
			{
				let shape = ShapeUtil.MakeSquare();
				ShapeUtil.MoveSquare(shape, size * scale, location, 360 - angle);
				Screen.DrawShape(spinner, false, shape);
			}

			if (spinnerfront)
			{
				screen.DrawTexture(spinnerfront, false, location.x, location.y, DTA_DestWidth, int(size.x * scale), DTA_DestHeight, int(size.y * scale), DTA_CenterOffset, true);
			}

			screen.Dim(0x000000, 0.2, 0, 0, screen.GetWidth(), screen.GetHeight());
		}
	}

	override void Ticker()
	{
		if (solution[0] == 0 && solution[1] == 0 && solution[2] == 0)
		{
			TryOpen();
			Close();

			return;
		}

		if (keyactive > 0) { keyactive--; }

		if (keyactive)
		{
			S_StartSound("safe/dial", CHAN_7, CHANF_UI | CHANF_NOSTOP, 0.5);

			if (destangle > angle)
			{
				angle += speed;
				dir = 1;

				if (angle > 360)
				{
					angle -= 360;
					count = max(0, count -1);
				}
			}
			else if (destangle < angle)
			{
				angle -= speed;
				dir = -1;

				if (angle < 0)
				{
					angle += 360;
				}
			}
		}
		else
		{
			destangle = angle;
		}

		if (olddir && olddir != dir && set < 3)
		{
			combo[set] = angle / (360 / steps);

			set++;
			count++;
		}
if (set < 3)
{
console.printf("%i >>> %i    %i", angle / (360 / steps), solution[set], count);
}
		olddir = dir;

		if (set > 0 && count <= 0)
		{
			DoReset();
		}

		Super.Ticker();
	}

	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		if (mkey == MKEY_Back)
		{
			Close();
			return true;
		}
		else if (mkey == MKEY_Enter)
		{
			// Attempt Open
			if (set == 2)
			{
				combo[2] = angle / (360 / steps);
				set = 3;
			}

			if (set > 2)
			{
				TryOpen();
			}

			return true;
		}
		else if (mkey == MKEY_Right)
		{
			if (set < 3)
			{
				// Turn Right
				keyactive = 5;
				destangle = angle - speed * 2;
			}
			else
			{
				TryOpen();
			}

			return true;
		}
		else if (mkey == MKEY_Left)
		{
			// Turn Left
			keyactive = 5;
			destangle = angle + speed * 2;

			return true;
		}

		return Super.MenuEvent(mkey, fromcontroller);
	}

	override bool MouseEvent(int type, int x, int y)
	{
		return false;
	}

	void TryOpen()
	{
		if (attempted) { return; }
		attempted = true;

		int match = true;

		for (int i = 0; i < 3; i++)
		{
			// Allow a step to either side of the right number to be accepted
			if (combo[i] >= solution[i] - 1 && combo[i] <= solution[i] + 1) { continue; }	

			match = false;
		}

		if (match)
		{
			S_StartSound("safe/open", CHAN_7, CHANF_UI | CHANF_NOSTOP, 0.5);
			EventHandler.SendNetworkEvent("opensafe", s.pos.x, s.pos.y, s.pos.z);

			Close();
		}
		else
		{
			S_StartSound("safe/locked", CHAN_7, CHANF_UI | CHANF_NOSTOP, 0.5);
		}
	}

	void DoReset()
	{
		for (int i = 0; i < 3; i++) { combo[i] = 0; }
		count = 0;
		set = 0;
		attempted = false;
	}
}